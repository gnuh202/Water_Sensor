
DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004acc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c08  08004c08  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08004c08  08004c08  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c08  08004c08  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c0c  08004c0c  00014c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08004c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000064  08004c74  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08004c74  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b65  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be5  00000000  00000000  00028bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002a7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002b258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a34  00000000  00000000  0002bc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b2e2  00000000  00000000  0004364c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084f95  00000000  00000000  0004e92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d38c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d24  00000000  00000000  000d3914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08004bc4 	.word	0x08004bc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08004bc4 	.word	0x08004bc4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2uiz>:
 8000f34:	0042      	lsls	r2, r0, #1
 8000f36:	d20e      	bcs.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30b      	bcc.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d409      	bmi.n	8000f5c <__aeabi_f2uiz+0x28>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	fa23 f002 	lsr.w	r0, r3, r2
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0000 	mov.w	r0, #0
 8000f5a:	4770      	bx	lr
 8000f5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f60:	d101      	bne.n	8000f66 <__aeabi_f2uiz+0x32>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	d102      	bne.n	8000f6c <__aeabi_f2uiz+0x38>
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6a:	4770      	bx	lr
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db0b      	blt.n	8000fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f003 021f 	and.w	r2, r3, #31
 8000fa8:	4906      	ldr	r1, [pc, #24]	; (8000fc4 <__NVIC_EnableIRQ+0x34>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	095b      	lsrs	r3, r3, #5
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	; (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	; (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	60da      	str	r2, [r3, #12]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	615a      	str	r2, [r3, #20]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0320 	and.w	r3, r3, #32
 80010d8:	2b20      	cmp	r3, #32
 80010da:	bf0c      	ite	eq
 80010dc:	2301      	moveq	r3, #1
 80010de:	2300      	movne	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010fc:	2b40      	cmp	r3, #64	; 0x40
 80010fe:	bf0c      	ite	eq
 8001100:	2301      	moveq	r3, #1
 8001102:	2300      	movne	r3, #0
 8001104:	b2db      	uxtb	r3, r3
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f06f 0220 	mvn.w	r2, #32
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800112a:	b480      	push	{r7}
 800112c:	b089      	sub	sp, #36	; 0x24
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	330c      	adds	r3, #12
 8001136:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	e853 3f00 	ldrex	r3, [r3]
 800113e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	f043 0320 	orr.w	r3, r3, #32
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	330c      	adds	r3, #12
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	61ba      	str	r2, [r7, #24]
 8001150:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001152:	6979      	ldr	r1, [r7, #20]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	e841 2300 	strex	r3, r2, [r1]
 800115a:	613b      	str	r3, [r7, #16]
   return(result);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1e7      	bne.n	8001132 <LL_USART_EnableIT_RXNE+0x8>
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	3724      	adds	r7, #36	; 0x24
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	b2db      	uxtb	r3, r3
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr

08001186 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	460b      	mov	r3, r1
 8001190:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001192:	78fa      	ldrb	r2, [r7, #3]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	605a      	str	r2, [r3, #4]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
	...

080011a4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80011ae:	69da      	ldr	r2, [r3, #28]
 80011b0:	4907      	ldr	r1, [pc, #28]	; (80011d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80011ba:	69da      	ldr	r2, [r3, #28]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4013      	ands	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000

080011d4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011de:	699a      	ldr	r2, [r3, #24]
 80011e0:	4907      	ldr	r1, [pc, #28]	; (8001200 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011ea:	699a      	ldr	r2, [r3, #24]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4013      	ands	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011f2:	68fb      	ldr	r3, [r7, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000

08001204 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001204:	b490      	push	{r4, r7}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	461a      	mov	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	0e1b      	lsrs	r3, r3, #24
 8001218:	4413      	add	r3, r2
 800121a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800121c:	6822      	ldr	r2, [r4, #0]
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	613b      	str	r3, [r7, #16]
  return result;
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	fab3 f383 	clz	r3, r3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	210f      	movs	r1, #15
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	401a      	ands	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa93 f3a3 	rbit	r3, r3
 8001248:	61bb      	str	r3, [r7, #24]
  return result;
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	fab3 f383 	clz	r3, r3
 8001250:	b2db      	uxtb	r3, r3
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	6023      	str	r3, [r4, #0]
}
 800125e:	bf00      	nop
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bc90      	pop	{r4, r7}
 8001266:	4770      	bx	lr

08001268 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	43da      	mvns	r2, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	0a1b      	lsrs	r3, r3, #8
 800127c:	4013      	ands	r3, r2
 800127e:	b29b      	uxth	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	bf0c      	ite	eq
 8001284:	2301      	moveq	r3, #1
 8001286:	2300      	movne	r3, #0
 8001288:	b2db      	uxtb	r3, r3
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	611a      	str	r2, [r3, #16]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	615a      	str	r2, [r3, #20]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	0a1b      	lsrs	r3, r3, #8
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	4013      	ands	r3, r2
 80012ee:	041a      	lsls	r2, r3, #16
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	400b      	ands	r3, r1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	611a      	str	r2, [r3, #16]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001312:	4a13      	ldr	r2, [pc, #76]	; (8001360 <LL_GPIO_AF_SetEXTISource+0x58>)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	3302      	adds	r3, #2
 800131a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	0c1b      	lsrs	r3, r3, #16
 8001322:	43db      	mvns	r3, r3
 8001324:	ea02 0103 	and.w	r1, r2, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	0c1b      	lsrs	r3, r3, #16
 800132c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	60bb      	str	r3, [r7, #8]
  return result;
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	fab3 f383 	clz	r3, r3
 800133c:	b2db      	uxtb	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	fa03 f202 	lsl.w	r2, r3, r2
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <LL_GPIO_AF_SetEXTISource+0x58>)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	430a      	orrs	r2, r1
 800134e:	3302      	adds	r3, #2
 8001350:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40010000 	.word	0x40010000

08001364 <Led1_On>:
void NAK_Send();
void Send_Data();
void Frame_Send(USART_TypeDef *USARTx , uint8_t *buff , uint8_t length);
void Frame_Process(uint8_t datalength);

void Led1_On()		{LL_GPIO_SetOutputPin(LED_1_GPIO_Port, LED_1_Pin);}				// Power
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
 8001368:	f640 0108 	movw	r1, #2056	; 0x808
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <Led1_On+0x14>)
 800136e:	f7ff ff91 	bl	8001294 <LL_GPIO_SetOutputPin>
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40010c00 	.word	0x40010c00

0800137c <Led2_On>:
void Led1_Off()		{LL_GPIO_ResetOutputPin(LED_1_GPIO_Port, LED_1_Pin);}
void Led2_On()		{LL_GPIO_SetOutputPin(LED_2_GPIO_Port, LED_2_Pin);}				// Relay
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
 8001380:	f241 0110 	movw	r1, #4112	; 0x1010
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <Led2_On+0x14>)
 8001386:	f7ff ff85 	bl	8001294 <LL_GPIO_SetOutputPin>
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40010c00 	.word	0x40010c00

08001394 <Led2_Off>:
void Led2_Off()		{LL_GPIO_ResetOutputPin(LED_2_GPIO_Port, LED_2_Pin);}
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
 8001398:	f241 0110 	movw	r1, #4112	; 0x1010
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <Led2_Off+0x14>)
 800139e:	f7ff ff88 	bl	80012b2 <LL_GPIO_ResetOutputPin>
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40010c00 	.word	0x40010c00

080013ac <Led3_On>:
void Led3_On()		{LL_GPIO_SetOutputPin(LED_3_GPIO_Port, LED_3_Pin);}				// Feedback
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	f242 0120 	movw	r1, #8224	; 0x2020
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <Led3_On+0x14>)
 80013b6:	f7ff ff6d 	bl	8001294 <LL_GPIO_SetOutputPin>
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40010c00 	.word	0x40010c00

080013c4 <Led3_Off>:
void Led3_Off()		{LL_GPIO_ResetOutputPin(LED_3_GPIO_Port, LED_3_Pin);}
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	f242 0120 	movw	r1, #8224	; 0x2020
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <Led3_Off+0x14>)
 80013ce:	f7ff ff70 	bl	80012b2 <LL_GPIO_ResetOutputPin>
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40010c00 	.word	0x40010c00

080013dc <Relay_On>:
void Relay_On()		{LL_GPIO_SetOutputPin(Relay_GPIO_Port, Relay_Pin);}
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
 80013e0:	f241 0110 	movw	r1, #4112	; 0x1010
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <Relay_On+0x14>)
 80013e6:	f7ff ff55 	bl	8001294 <LL_GPIO_SetOutputPin>
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40010800 	.word	0x40010800

080013f4 <Relay_Off>:
void Relay_Off()	{LL_GPIO_ResetOutputPin(Relay_GPIO_Port, Relay_Pin);}
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	f241 0110 	movw	r1, #4112	; 0x1010
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <Relay_Off+0x14>)
 80013fe:	f7ff ff58 	bl	80012b2 <LL_GPIO_ResetOutputPin>
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40010800 	.word	0x40010800

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001410:	f001 f87a 	bl	8002508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001414:	f000 f862 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001418:	f000 f9aa 	bl	8001770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800141c:	f000 f8d2 	bl	80015c4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001420:	f000 f93a 	bl	8001698 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001424:	f000 f8a0 	bl	8001568 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if(LL_GPIO_IsInputPinSet(GPIOB, FeedBack_Pin))
 8001428:	f240 2102 	movw	r1, #514	; 0x202
 800142c:	4823      	ldr	r0, [pc, #140]	; (80014bc <main+0xb0>)
 800142e:	f7ff ff1b 	bl	8001268 <LL_GPIO_IsInputPinSet>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <main+0x38>
  {
	  value[1][0] = 0x30;
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <main+0xb4>)
 800143a:	2230      	movs	r2, #48	; 0x30
 800143c:	729a      	strb	r2, [r3, #10]
	  Led3_Off();
 800143e:	f7ff ffc1 	bl	80013c4 <Led3_Off>
 8001442:	e004      	b.n	800144e <main+0x42>
  }
  else
  {
	  value[1][0] = 0x31;
 8001444:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <main+0xb4>)
 8001446:	2231      	movs	r2, #49	; 0x31
 8001448:	729a      	strb	r2, [r3, #10]
	  Led3_On();
 800144a:	f7ff ffaf 	bl	80013ac <Led3_On>
  }
  SysTick_Init(1000);
 800144e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001452:	f000 fa15 	bl	8001880 <SysTick_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(Send_Interval >= wait_time*1000)
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <main+0xb8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f64c 7207 	movw	r2, #52999	; 0xcf07
 800145e:	4293      	cmp	r3, r2
 8001460:	d914      	bls.n	800148c <main+0x80>
	{
	  Send_Data();
 8001462:	f000 fd3b 	bl	8001edc <Send_Data>
	  while(timeout < 1000);
 8001466:	bf00      	nop
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <main+0xbc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001470:	d3fa      	bcc.n	8001468 <main+0x5c>
	  Frame_Send(USART3, TX3_Buffer, TX3_Temp);
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <main+0xc0>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	4915      	ldr	r1, [pc, #84]	; (80014d0 <main+0xc4>)
 800147a:	4816      	ldr	r0, [pc, #88]	; (80014d4 <main+0xc8>)
 800147c:	f000 faa1 	bl	80019c2 <Frame_Send>
	  timeout = 0;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <main+0xbc>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
	  Send_Interval = 0;
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <main+0xb8>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
	}


	if(Relay_status)
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <main+0xcc>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0e0      	beq.n	8001456 <main+0x4a>
	{
	  Relay_status = 0;
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <main+0xcc>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
	  Frame_Process(2);
 800149a:	2002      	movs	r0, #2
 800149c:	f000 fab6 	bl	8001a0c <Frame_Process>
	  while(timeout < 1000);
 80014a0:	bf00      	nop
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <main+0xbc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014aa:	d3fa      	bcc.n	80014a2 <main+0x96>
	  Frame_Send(USART3, TX3_Buffer, TX3_Temp);
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <main+0xc0>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4907      	ldr	r1, [pc, #28]	; (80014d0 <main+0xc4>)
 80014b4:	4807      	ldr	r0, [pc, #28]	; (80014d4 <main+0xc8>)
 80014b6:	f000 fa84 	bl	80019c2 <Frame_Send>
	if(Send_Interval >= wait_time*1000)
 80014ba:	e7cc      	b.n	8001456 <main+0x4a>
 80014bc:	40010c00 	.word	0x40010c00
 80014c0:	20000020 	.word	0x20000020
 80014c4:	20000054 	.word	0x20000054
 80014c8:	2000018c 	.word	0x2000018c
 80014cc:	2000014c 	.word	0x2000014c
 80014d0:	200000e8 	.word	0x200000e8
 80014d4:	40004800 	.word	0x40004800
 80014d8:	200001a6 	.word	0x200001a6

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b090      	sub	sp, #64	; 0x40
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0318 	add.w	r3, r7, #24
 80014e6:	2228      	movs	r2, #40	; 0x28
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f003 fb62 	bl	8004bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fe:	2301      	movs	r3, #1
 8001500:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001506:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150c:	2301      	movs	r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001510:	2302      	movs	r3, #2
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001514:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001518:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 800151a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800151e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001520:	f107 0318 	add.w	r3, r7, #24
 8001524:	4618      	mov	r0, r3
 8001526:	f002 faed 	bl	8003b04 <HAL_RCC_OscConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001530:	f000 feda 	bl	80022e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2302      	movs	r3, #2
 800153a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001544:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2101      	movs	r1, #1
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fd5a 	bl	8004008 <HAL_RCC_ClockConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800155a:	f000 fec5 	bl	80022e8 <Error_Handler>
  }
}
 800155e:	bf00      	nop
 8001560:	3740      	adds	r7, #64	; 0x40
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_I2C1_Init+0x50>)
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <MX_I2C1_Init+0x54>)
 8001570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_I2C1_Init+0x58>)
 8001576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_I2C1_Init+0x50>)
 80015a6:	f001 fa79 	bl	8002a9c <HAL_I2C_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b0:	f000 fe9a 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000080 	.word	0x20000080
 80015bc:	40005400 	.word	0x40005400
 80015c0:	000186a0 	.word	0x000186a0

080015c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	; 0x30
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
 80015da:	615a      	str	r2, [r3, #20]
 80015dc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	463b      	mov	r3, r7
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80015ec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80015f0:	f7ff fdd8 	bl	80011a4 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80015f4:	2004      	movs	r0, #4
 80015f6:	f7ff fded 	bl	80011d4 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80015fa:	f240 4304 	movw	r3, #1028	; 0x404
 80015fe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001600:	2309      	movs	r3, #9
 8001602:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	463b      	mov	r3, r7
 800160e:	4619      	mov	r1, r3
 8001610:	481f      	ldr	r0, [pc, #124]	; (8001690 <MX_USART2_UART_Init+0xcc>)
 8001612:	f003 f83c 	bl	800468e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001616:	f640 0308 	movw	r3, #2056	; 0x808
 800161a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800161c:	2304      	movs	r3, #4
 800161e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	463b      	mov	r3, r7
 8001622:	4619      	mov	r1, r3
 8001624:	481a      	ldr	r0, [pc, #104]	; (8001690 <MX_USART2_UART_Init+0xcc>)
 8001626:	f003 f832 	bl	800468e <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800162a:	f7ff fca3 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 800162e:	4603      	mov	r3, r0
 8001630:	2200      	movs	r2, #0
 8001632:	2101      	movs	r1, #1
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fcf1 	bl	800101c <NVIC_EncodePriority>
 800163a:	4603      	mov	r3, r0
 800163c:	4619      	mov	r1, r3
 800163e:	2026      	movs	r0, #38	; 0x26
 8001640:	f7ff fcc2 	bl	8000fc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001644:	2026      	movs	r0, #38	; 0x26
 8001646:	f7ff fca3 	bl	8000f90 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800164a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800164e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800165c:	230c      	movs	r3, #12
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001660:	2300      	movs	r3, #0
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4809      	ldr	r0, [pc, #36]	; (8001694 <MX_USART2_UART_Init+0xd0>)
 8001670:	f003 fa1c 	bl	8004aac <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001674:	4807      	ldr	r0, [pc, #28]	; (8001694 <MX_USART2_UART_Init+0xd0>)
 8001676:	f7ff fd12 	bl	800109e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <MX_USART2_UART_Init+0xd0>)
 800167c:	f7ff fd00 	bl	8001080 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  LL_USART_EnableIT_RXNE(USART2);
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <MX_USART2_UART_Init+0xd0>)
 8001682:	f7ff fd52 	bl	800112a <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3730      	adds	r7, #48	; 0x30
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40010800 	.word	0x40010800
 8001694:	40004400 	.word	0x40004400

08001698 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	; 0x30
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	463b      	mov	r3, r7
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80016c0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80016c4:	f7ff fd6e 	bl	80011a4 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80016c8:	2008      	movs	r0, #8
 80016ca:	f7ff fd83 	bl	80011d4 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80016ce:	4b24      	ldr	r3, [pc, #144]	; (8001760 <MX_USART3_UART_Init+0xc8>)
 80016d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016d2:	2309      	movs	r3, #9
 80016d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	463b      	mov	r3, r7
 80016e0:	4619      	mov	r1, r3
 80016e2:	4820      	ldr	r0, [pc, #128]	; (8001764 <MX_USART3_UART_Init+0xcc>)
 80016e4:	f002 ffd3 	bl	800468e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80016e8:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <MX_USART3_UART_Init+0xd0>)
 80016ea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80016ec:	2304      	movs	r3, #4
 80016ee:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	463b      	mov	r3, r7
 80016f2:	4619      	mov	r1, r3
 80016f4:	481b      	ldr	r0, [pc, #108]	; (8001764 <MX_USART3_UART_Init+0xcc>)
 80016f6:	f002 ffca 	bl	800468e <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80016fa:	f7ff fc3b 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80016fe:	4603      	mov	r3, r0
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fc89 	bl	800101c <NVIC_EncodePriority>
 800170a:	4603      	mov	r3, r0
 800170c:	4619      	mov	r1, r3
 800170e:	2027      	movs	r0, #39	; 0x27
 8001710:	f7ff fc5a 	bl	8000fc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8001714:	2027      	movs	r0, #39	; 0x27
 8001716:	f7ff fc3b 	bl	8000f90 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800171a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800171e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800172c:	230c      	movs	r3, #12
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	480b      	ldr	r0, [pc, #44]	; (800176c <MX_USART3_UART_Init+0xd4>)
 8001740:	f003 f9b4 	bl	8004aac <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001744:	4809      	ldr	r0, [pc, #36]	; (800176c <MX_USART3_UART_Init+0xd4>)
 8001746:	f7ff fcaa 	bl	800109e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800174a:	4808      	ldr	r0, [pc, #32]	; (800176c <MX_USART3_UART_Init+0xd4>)
 800174c:	f7ff fc98 	bl	8001080 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */
  LL_USART_EnableIT_RXNE(USART3);
 8001750:	4806      	ldr	r0, [pc, #24]	; (800176c <MX_USART3_UART_Init+0xd4>)
 8001752:	f7ff fcea 	bl	800112a <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART3_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	3730      	adds	r7, #48	; 0x30
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	04040004 	.word	0x04040004
 8001764:	40010c00 	.word	0x40010c00
 8001768:	04080008 	.word	0x04080008
 800176c:	40004800 	.word	0x40004800

08001770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001776:	f107 0318 	add.w	r3, r7, #24
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 800178e:	2010      	movs	r0, #16
 8001790:	f7ff fd20 	bl	80011d4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001794:	2020      	movs	r0, #32
 8001796:	f7ff fd1d 	bl	80011d4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800179a:	2004      	movs	r0, #4
 800179c:	f7ff fd1a 	bl	80011d4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80017a0:	2008      	movs	r0, #8
 80017a2:	f7ff fd17 	bl	80011d4 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 80017a6:	4932      	ldr	r1, [pc, #200]	; (8001870 <MX_GPIO_Init+0x100>)
 80017a8:	4832      	ldr	r0, [pc, #200]	; (8001874 <MX_GPIO_Init+0x104>)
 80017aa:	f7ff fd82 	bl	80012b2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Relay_GPIO_Port, Relay_Pin);
 80017ae:	f241 0110 	movw	r1, #4112	; 0x1010
 80017b2:	4831      	ldr	r0, [pc, #196]	; (8001878 <MX_GPIO_Init+0x108>)
 80017b4:	f7ff fd7d 	bl	80012b2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin);
 80017b8:	f643 0138 	movw	r1, #14392	; 0x3838
 80017bc:	482f      	ldr	r0, [pc, #188]	; (800187c <MX_GPIO_Init+0x10c>)
 80017be:	f7ff fd78 	bl	80012b2 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 80017c2:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <MX_GPIO_Init+0x100>)
 80017c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80017c6:	2301      	movs	r3, #1
 80017c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017ca:	2302      	movs	r3, #2
 80017cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	4619      	mov	r1, r3
 80017d6:	4827      	ldr	r0, [pc, #156]	; (8001874 <MX_GPIO_Init+0x104>)
 80017d8:	f002 ff59 	bl	800468e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Relay_Pin;
 80017dc:	f241 0310 	movw	r3, #4112	; 0x1010
 80017e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80017e2:	2301      	movs	r3, #1
 80017e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017e6:	2302      	movs	r3, #2
 80017e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(Relay_GPIO_Port, &GPIO_InitStruct);
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	4619      	mov	r1, r3
 80017f6:	4820      	ldr	r0, [pc, #128]	; (8001878 <MX_GPIO_Init+0x108>)
 80017f8:	f002 ff49 	bl	800468e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 80017fc:	f643 0338 	movw	r3, #14392	; 0x3838
 8001800:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001802:	2301      	movs	r3, #1
 8001804:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001806:	2302      	movs	r3, #2
 8001808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4619      	mov	r1, r3
 8001812:	481a      	ldr	r0, [pc, #104]	; (800187c <MX_GPIO_Init+0x10c>)
 8001814:	f002 ff3b 	bl	800468e <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE1);
 8001818:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 800181c:	2001      	movs	r0, #1
 800181e:	f7ff fd73 	bl	8001308 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001822:	2302      	movs	r3, #2
 8001824:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001826:	2301      	movs	r3, #1
 8001828:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800182a:	2300      	movs	r3, #0
 800182c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 800182e:	2303      	movs	r3, #3
 8001830:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001832:	f107 0318 	add.w	r3, r7, #24
 8001836:	4618      	mov	r0, r3
 8001838:	f002 fdf0 	bl	800441c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(FeedBack_GPIO_Port, FeedBack_Pin, LL_GPIO_MODE_FLOATING);
 800183c:	2204      	movs	r2, #4
 800183e:	f240 2102 	movw	r1, #514	; 0x202
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <MX_GPIO_Init+0x10c>)
 8001844:	f7ff fcde 	bl	8001204 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001848:	f7ff fb94 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 800184c:	4603      	mov	r3, r0
 800184e:	2200      	movs	r2, #0
 8001850:	2101      	movs	r1, #1
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fbe2 	bl	800101c <NVIC_EncodePriority>
 8001858:	4603      	mov	r3, r0
 800185a:	4619      	mov	r1, r3
 800185c:	2007      	movs	r0, #7
 800185e:	f7ff fbb3 	bl	8000fc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8001862:	2007      	movs	r0, #7
 8001864:	f7ff fb94 	bl	8000f90 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001868:	bf00      	nop
 800186a:	3720      	adds	r7, #32
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	04200020 	.word	0x04200020
 8001874:	40011000 	.word	0x40011000
 8001878:	40010800 	.word	0x40010800
 800187c:	40010c00 	.word	0x40010c00

08001880 <SysTick_Init>:

/* USER CODE BEGIN 4 */
void SysTick_Init(uint32_t time)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  SysTick->VAL = 0;
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <SysTick_Init+0x34>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  SysTick->LOAD = 40*time-1;
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <SysTick_Init+0x34>)
 800189a:	3b01      	subs	r3, #1
 800189c:	6053      	str	r3, [r2, #4]
  silent_interval = 0;
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <SysTick_Init+0x38>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
  SysTick->CTRL = (SysTick_CTRL_ENABLE_Msk|SysTick_CTRL_CLKSOURCE_Msk|SysTick_CTRL_TICKINT_Msk);
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <SysTick_Init+0x34>)
 80018a6:	2207      	movs	r2, #7
 80018a8:	601a      	str	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	e000e010 	.word	0xe000e010
 80018b8:	20000188 	.word	0x20000188

080018bc <SysTick_Interrupt>:
     while((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == SysTick_CTRL_COUNTFLAG_Msk)
	time--;

}
void SysTick_Interrupt()
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	silent_interval++;
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <SysTick_Interrupt+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	4a16      	ldr	r2, [pc, #88]	; (8001920 <SysTick_Interrupt+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]
	Send_Interval++;
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <SysTick_Interrupt+0x68>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <SysTick_Interrupt+0x68>)
 80018d2:	6013      	str	r3, [r2, #0]
	Led_count++;
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <SysTick_Interrupt+0x6c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	3301      	adds	r3, #1
 80018da:	4a13      	ldr	r2, [pc, #76]	; (8001928 <SysTick_Interrupt+0x6c>)
 80018dc:	6013      	str	r3, [r2, #0]
	timeout++;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <SysTick_Interrupt+0x70>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	3301      	adds	r3, #1
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <SysTick_Interrupt+0x70>)
 80018e6:	6013      	str	r3, [r2, #0]
	if(Led_count < 500)
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <SysTick_Interrupt+0x6c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018f0:	d205      	bcs.n	80018fe <SysTick_Interrupt+0x42>
		LL_GPIO_SetOutputPin(LED_1_GPIO_Port, LED_1_Pin);
 80018f2:	f640 0108 	movw	r1, #2056	; 0x808
 80018f6:	480e      	ldr	r0, [pc, #56]	; (8001930 <SysTick_Interrupt+0x74>)
 80018f8:	f7ff fccc 	bl	8001294 <LL_GPIO_SetOutputPin>
 80018fc:	e004      	b.n	8001908 <SysTick_Interrupt+0x4c>
	else
		LL_GPIO_ResetOutputPin(LED_1_GPIO_Port, LED_1_Pin);
 80018fe:	f640 0108 	movw	r1, #2056	; 0x808
 8001902:	480b      	ldr	r0, [pc, #44]	; (8001930 <SysTick_Interrupt+0x74>)
 8001904:	f7ff fcd5 	bl	80012b2 <LL_GPIO_ResetOutputPin>
	if(Led_count >= 5500)
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <SysTick_Interrupt+0x6c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f241 527b 	movw	r2, #5499	; 0x157b
 8001910:	4293      	cmp	r3, r2
 8001912:	d902      	bls.n	800191a <SysTick_Interrupt+0x5e>
		Led_count = 0;
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Interrupt+0x6c>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000188 	.word	0x20000188
 8001924:	20000054 	.word	0x20000054
 8001928:	20000184 	.word	0x20000184
 800192c:	2000018c 	.word	0x2000018c
 8001930:	40010c00 	.word	0x40010c00

08001934 <Lora_Send>:


void Lora_Send(uint8_t dat)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
	  LL_USART_TransmitData8(USART3,dat);
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	4619      	mov	r1, r3
 8001942:	4807      	ldr	r0, [pc, #28]	; (8001960 <Lora_Send+0x2c>)
 8001944:	f7ff fc1f 	bl	8001186 <LL_USART_TransmitData8>
	  while(!LL_USART_IsActiveFlag_TC(USART3));
 8001948:	bf00      	nop
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <Lora_Send+0x2c>)
 800194c:	f7ff fbce 	bl	80010ec <LL_USART_IsActiveFlag_TC>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f9      	beq.n	800194a <Lora_Send+0x16>
}
 8001956:	bf00      	nop
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40004800 	.word	0x40004800

08001964 <Lora_Buffer_Write>:

void Lora_Buffer_Write(uint8_t dat)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
	TX3_Buffer[TX3_Temp] = dat;
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <Lora_Buffer_Write+0x3c>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	4619      	mov	r1, r3
 8001974:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <Lora_Buffer_Write+0x40>)
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	5453      	strb	r3, [r2, r1]
	if(TX3_Temp == 0xFF)	TX3_Temp = 0;
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <Lora_Buffer_Write+0x3c>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2bff      	cmp	r3, #255	; 0xff
 8001980:	d103      	bne.n	800198a <Lora_Buffer_Write+0x26>
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <Lora_Buffer_Write+0x3c>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
	else					TX3_Temp++;
}
 8001988:	e005      	b.n	8001996 <Lora_Buffer_Write+0x32>
	else					TX3_Temp++;
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <Lora_Buffer_Write+0x3c>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <Lora_Buffer_Write+0x3c>)
 8001994:	701a      	strb	r2, [r3, #0]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	2000014c 	.word	0x2000014c
 80019a4:	200000e8 	.word	0x200000e8

080019a8 <ACK_Send>:
void ACK_Send()
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	Lora_Send(STX);
 80019ac:	2002      	movs	r0, #2
 80019ae:	f7ff ffc1 	bl	8001934 <Lora_Send>
	Lora_Send(ACK);
 80019b2:	2006      	movs	r0, #6
 80019b4:	f7ff ffbe 	bl	8001934 <Lora_Send>
	Lora_Send(ETX);
 80019b8:	2003      	movs	r0, #3
 80019ba:	f7ff ffbb 	bl	8001934 <Lora_Send>
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <Frame_Send>:
	Lora_Send(STX);
	Lora_Send(NAK);
	Lora_Send(ETX);
}
void Frame_Send(USART_TypeDef *USARTx , uint8_t *buff , uint8_t length)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	4613      	mov	r3, r2
 80019ce:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0 ; i < length ; i++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	75fb      	strb	r3, [r7, #23]
 80019d4:	e011      	b.n	80019fa <Frame_Send+0x38>
	{
		LL_USART_TransmitData8(USARTx,buff[i]);
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	4413      	add	r3, r2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	4619      	mov	r1, r3
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f7ff fbd0 	bl	8001186 <LL_USART_TransmitData8>
		while(!LL_USART_IsActiveFlag_TC(USARTx));
 80019e6:	bf00      	nop
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f7ff fb7f 	bl	80010ec <LL_USART_IsActiveFlag_TC>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f9      	beq.n	80019e8 <Frame_Send+0x26>
	for(uint8_t i = 0 ; i < length ; i++)
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	3301      	adds	r3, #1
 80019f8:	75fb      	strb	r3, [r7, #23]
 80019fa:	7dfa      	ldrb	r2, [r7, #23]
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d3e9      	bcc.n	80019d6 <Frame_Send+0x14>
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <Frame_Process>:

void Frame_Process(uint8_t datalength)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
	uint8_t nchar,n,m,i,CheckSum;

	TX3_Temp = 0;
 8001a16:	4b52      	ldr	r3, [pc, #328]	; (8001b60 <Frame_Process+0x154>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
	Lora_Buffer_Write(STX);
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f7ff ffa1 	bl	8001964 <Lora_Buffer_Write>
	TX3_Temp = 2;
 8001a22:	4b4f      	ldr	r3, [pc, #316]	; (8001b60 <Frame_Process+0x154>)
 8001a24:	2202      	movs	r2, #2
 8001a26:	701a      	strb	r2, [r3, #0]
	Lora_Buffer_Write('{');
 8001a28:	207b      	movs	r0, #123	; 0x7b
 8001a2a:	f7ff ff9b 	bl	8001964 <Lora_Buffer_Write>
	for(nchar = 0 ; nchar < datalength ;nchar ++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	73fb      	strb	r3, [r7, #15]
 8001a32:	e06b      	b.n	8001b0c <Frame_Process+0x100>
	{
	    Lora_Buffer_Write('"');
 8001a34:	2022      	movs	r0, #34	; 0x22
 8001a36:	f7ff ff95 	bl	8001964 <Lora_Buffer_Write>
	    for(n = 0 ; n < 6 ; n++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	73bb      	strb	r3, [r7, #14]
 8001a3e:	e01b      	b.n	8001a78 <Frame_Process+0x6c>
	    {
	    	if(data[nchar][n] == 0)	break;
 8001a40:	7bfa      	ldrb	r2, [r7, #15]
 8001a42:	7bb9      	ldrb	r1, [r7, #14]
 8001a44:	4847      	ldr	r0, [pc, #284]	; (8001b64 <Frame_Process+0x158>)
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4403      	add	r3, r0
 8001a50:	440b      	add	r3, r1
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d013      	beq.n	8001a80 <Frame_Process+0x74>
	    	Lora_Buffer_Write(data[nchar][n]);
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	7bb9      	ldrb	r1, [r7, #14]
 8001a5c:	4841      	ldr	r0, [pc, #260]	; (8001b64 <Frame_Process+0x158>)
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4403      	add	r3, r0
 8001a68:	440b      	add	r3, r1
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff79 	bl	8001964 <Lora_Buffer_Write>
	    for(n = 0 ; n < 6 ; n++)
 8001a72:	7bbb      	ldrb	r3, [r7, #14]
 8001a74:	3301      	adds	r3, #1
 8001a76:	73bb      	strb	r3, [r7, #14]
 8001a78:	7bbb      	ldrb	r3, [r7, #14]
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	d9e0      	bls.n	8001a40 <Frame_Process+0x34>
 8001a7e:	e000      	b.n	8001a82 <Frame_Process+0x76>
	    	if(data[nchar][n] == 0)	break;
 8001a80:	bf00      	nop
	    }
	    Lora_Buffer_Write('"');
 8001a82:	2022      	movs	r0, #34	; 0x22
 8001a84:	f7ff ff6e 	bl	8001964 <Lora_Buffer_Write>
	    Lora_Buffer_Write(':');
 8001a88:	203a      	movs	r0, #58	; 0x3a
 8001a8a:	f7ff ff6b 	bl	8001964 <Lora_Buffer_Write>
	    Lora_Buffer_Write('"');
 8001a8e:	2022      	movs	r0, #34	; 0x22
 8001a90:	f7ff ff68 	bl	8001964 <Lora_Buffer_Write>
	    for(m = 0 ; m < 5 ; m++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	737b      	strb	r3, [r7, #13]
 8001a98:	e01b      	b.n	8001ad2 <Frame_Process+0xc6>
	    {
	    	if(value[nchar][m] == 0)	break;
 8001a9a:	7bfa      	ldrb	r2, [r7, #15]
 8001a9c:	7b79      	ldrb	r1, [r7, #13]
 8001a9e:	4832      	ldr	r0, [pc, #200]	; (8001b68 <Frame_Process+0x15c>)
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4403      	add	r3, r0
 8001aaa:	440b      	add	r3, r1
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d013      	beq.n	8001ada <Frame_Process+0xce>
	    	Lora_Buffer_Write(value[nchar][m]);
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	7b79      	ldrb	r1, [r7, #13]
 8001ab6:	482c      	ldr	r0, [pc, #176]	; (8001b68 <Frame_Process+0x15c>)
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4403      	add	r3, r0
 8001ac2:	440b      	add	r3, r1
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ff4c 	bl	8001964 <Lora_Buffer_Write>
	    for(m = 0 ; m < 5 ; m++)
 8001acc:	7b7b      	ldrb	r3, [r7, #13]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	737b      	strb	r3, [r7, #13]
 8001ad2:	7b7b      	ldrb	r3, [r7, #13]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d9e0      	bls.n	8001a9a <Frame_Process+0x8e>
 8001ad8:	e000      	b.n	8001adc <Frame_Process+0xd0>
	    	if(value[nchar][m] == 0)	break;
 8001ada:	bf00      	nop
	    }
	    Lora_Buffer_Write('"');
 8001adc:	2022      	movs	r0, #34	; 0x22
 8001ade:	f7ff ff41 	bl	8001964 <Lora_Buffer_Write>
	    if(nchar < datalength - 1)
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	da03      	bge.n	8001af4 <Frame_Process+0xe8>
	    	Lora_Buffer_Write(',');
 8001aec:	202c      	movs	r0, #44	; 0x2c
 8001aee:	f7ff ff39 	bl	8001964 <Lora_Buffer_Write>
 8001af2:	e002      	b.n	8001afa <Frame_Process+0xee>
	    else
	    	Lora_Buffer_Write('}');
 8001af4:	207d      	movs	r0, #125	; 0x7d
 8001af6:	f7ff ff35 	bl	8001964 <Lora_Buffer_Write>
	    if(nchar == 1)	Relay_status = 0;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d102      	bne.n	8001b06 <Frame_Process+0xfa>
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <Frame_Process+0x160>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
	for(nchar = 0 ; nchar < datalength ;nchar ++)
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d38f      	bcc.n	8001a34 <Frame_Process+0x28>
	}
	CheckSum = TX3_Temp - 2;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <Frame_Process+0x154>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	3b02      	subs	r3, #2
 8001b1a:	72fb      	strb	r3, [r7, #11]
	TX3_Buffer[1] = CheckSum;
 8001b1c:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <Frame_Process+0x164>)
 8001b1e:	7afb      	ldrb	r3, [r7, #11]
 8001b20:	7053      	strb	r3, [r2, #1]
	CheckSum = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	72fb      	strb	r3, [r7, #11]
	for(i = 1 ; i < TX3_Temp; i++)
 8001b26:	2301      	movs	r3, #1
 8001b28:	733b      	strb	r3, [r7, #12]
 8001b2a:	e008      	b.n	8001b3e <Frame_Process+0x132>
	   CheckSum += TX3_Buffer[i];
 8001b2c:	7b3b      	ldrb	r3, [r7, #12]
 8001b2e:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <Frame_Process+0x164>)
 8001b30:	5cd2      	ldrb	r2, [r2, r3]
 8001b32:	7afb      	ldrb	r3, [r7, #11]
 8001b34:	4413      	add	r3, r2
 8001b36:	72fb      	strb	r3, [r7, #11]
	for(i = 1 ; i < TX3_Temp; i++)
 8001b38:	7b3b      	ldrb	r3, [r7, #12]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	733b      	strb	r3, [r7, #12]
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <Frame_Process+0x154>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	7b3a      	ldrb	r2, [r7, #12]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d3f1      	bcc.n	8001b2c <Frame_Process+0x120>
	Lora_Buffer_Write(CheckSum);
 8001b48:	7afb      	ldrb	r3, [r7, #11]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff0a 	bl	8001964 <Lora_Buffer_Write>
	Lora_Buffer_Write(ETX);
 8001b50:	2003      	movs	r0, #3
 8001b52:	f7ff ff07 	bl	8001964 <Lora_Buffer_Write>
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000014c 	.word	0x2000014c
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000020 	.word	0x20000020
 8001b6c:	200001a6 	.word	0x200001a6
 8001b70:	200000e8 	.word	0x200000e8

08001b74 <FeedBack>:

void FeedBack()
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  if(LL_GPIO_IsInputPinSet(GPIOB, FeedBack_Pin))
 8001b78:	f240 2102 	movw	r1, #514	; 0x202
 8001b7c:	480a      	ldr	r0, [pc, #40]	; (8001ba8 <FeedBack+0x34>)
 8001b7e:	f7ff fb73 	bl	8001268 <LL_GPIO_IsInputPinSet>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <FeedBack+0x20>
	{
		value[1][0] = 0x30;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <FeedBack+0x38>)
 8001b8a:	2230      	movs	r2, #48	; 0x30
 8001b8c:	729a      	strb	r2, [r3, #10]
		Led3_Off();
 8001b8e:	f7ff fc19 	bl	80013c4 <Led3_Off>
 8001b92:	e004      	b.n	8001b9e <FeedBack+0x2a>
	}
	else
	{
		value[1][0] = 0x31;
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <FeedBack+0x38>)
 8001b96:	2231      	movs	r2, #49	; 0x31
 8001b98:	729a      	strb	r2, [r3, #10]
		Led3_On();
 8001b9a:	f7ff fc07 	bl	80013ac <Led3_On>
	}
	Relay_status = 1;
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <FeedBack+0x3c>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40010c00 	.word	0x40010c00
 8001bac:	20000020 	.word	0x20000020
 8001bb0:	200001a6 	.word	0x200001a6

08001bb4 <float2ascii>:

void float2ascii(uint8_t *data ,float num , uint8_t length2)	// length.length2
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	77fb      	strb	r3, [r7, #31]
	uint32_t qwe = 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61bb      	str	r3, [r7, #24]
	int32_t numvalue;
	uint8_t length = 1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	74fb      	strb	r3, [r7, #19]
	*data = 0;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
	data += 9;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3309      	adds	r3, #9
 8001bd8:	60fb      	str	r3, [r7, #12]
	if(length2 != 0)	length2++;
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <float2ascii+0x32>
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	3301      	adds	r3, #1
 8001be4:	71fb      	strb	r3, [r7, #7]
	for(i = 0 ; i < 9 ; i++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	77fb      	strb	r3, [r7, #31]
 8001bea:	e008      	b.n	8001bfe <float2ascii+0x4a>
	{
		*data = 0;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
		data--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
	for(i = 0 ; i < 9 ; i++)
 8001bf8:	7ffb      	ldrb	r3, [r7, #31]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	77fb      	strb	r3, [r7, #31]
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d9f3      	bls.n	8001bec <float2ascii+0x38>
	}
	if(num<0)
 8001c04:	f04f 0100 	mov.w	r1, #0
 8001c08:	68b8      	ldr	r0, [r7, #8]
 8001c0a:	f7ff f96b 	bl	8000ee4 <__aeabi_fcmplt>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d009      	beq.n	8001c28 <float2ascii+0x74>
	{
		*data = '-';
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	222d      	movs	r2, #45	; 0x2d
 8001c18:	701a      	strb	r2, [r3, #0]
		num = -num;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c20:	60bb      	str	r3, [r7, #8]
		data++;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3301      	adds	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
	}
	numvalue = (uint32_t)num;
 8001c28:	68b8      	ldr	r0, [r7, #8]
 8001c2a:	f7ff f983 	bl	8000f34 <__aeabi_f2uiz>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	617b      	str	r3, [r7, #20]
	for(i = 0 ; i < 10 ; i++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	77fb      	strb	r3, [r7, #31]
 8001c36:	e010      	b.n	8001c5a <float2ascii+0xa6>
	{	numvalue = numvalue/10;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	4a37      	ldr	r2, [pc, #220]	; (8001d18 <float2ascii+0x164>)
 8001c3c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c40:	1092      	asrs	r2, r2, #2
 8001c42:	17db      	asrs	r3, r3, #31
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
		if(numvalue == 0)	break;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <float2ascii+0xae>
		else
			length++;
 8001c4e:	7cfb      	ldrb	r3, [r7, #19]
 8001c50:	3301      	adds	r3, #1
 8001c52:	74fb      	strb	r3, [r7, #19]
	for(i = 0 ; i < 10 ; i++)
 8001c54:	7ffb      	ldrb	r3, [r7, #31]
 8001c56:	3301      	adds	r3, #1
 8001c58:	77fb      	strb	r3, [r7, #31]
 8001c5a:	7ffb      	ldrb	r3, [r7, #31]
 8001c5c:	2b09      	cmp	r3, #9
 8001c5e:	d9eb      	bls.n	8001c38 <float2ascii+0x84>
 8001c60:	e000      	b.n	8001c64 <float2ascii+0xb0>
		if(numvalue == 0)	break;
 8001c62:	bf00      	nop
	}

	data += length + length2 - 1;
 8001c64:	7cfa      	ldrb	r2, [r7, #19]
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	4413      	add	r3, r2
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]


	for(i = 1 ; i < length2 ; i++)
 8001c72:	2301      	movs	r3, #1
 8001c74:	77fb      	strb	r3, [r7, #31]
 8001c76:	e008      	b.n	8001c8a <float2ascii+0xd6>
		qwe *= 10;
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	61bb      	str	r3, [r7, #24]
	for(i = 1 ; i < length2 ; i++)
 8001c84:	7ffb      	ldrb	r3, [r7, #31]
 8001c86:	3301      	adds	r3, #1
 8001c88:	77fb      	strb	r3, [r7, #31]
 8001c8a:	7ffa      	ldrb	r2, [r7, #31]
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d3f2      	bcc.n	8001c78 <float2ascii+0xc4>
	numvalue = (uint32_t)(num*qwe);
 8001c92:	69b8      	ldr	r0, [r7, #24]
 8001c94:	f7fe ff30 	bl	8000af8 <__aeabi_ui2f>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	68b9      	ldr	r1, [r7, #8]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe ff83 	bl	8000ba8 <__aeabi_fmul>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f945 	bl	8000f34 <__aeabi_f2uiz>
 8001caa:	4603      	mov	r3, r0
 8001cac:	617b      	str	r3, [r7, #20]

	for(i = 1;i <= length + length2;i++)
 8001cae:	2301      	movs	r3, #1
 8001cb0:	77fb      	strb	r3, [r7, #31]
 8001cb2:	e026      	b.n	8001d02 <float2ascii+0x14e>
	{
		if(i == length2)
 8001cb4:	7ffa      	ldrb	r2, [r7, #31]
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d103      	bne.n	8001cc4 <float2ascii+0x110>
			*data = '.';
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	222e      	movs	r2, #46	; 0x2e
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	e018      	b.n	8001cf6 <float2ascii+0x142>
		else
		{
			*data = numvalue%10 + 0x30;
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <float2ascii+0x164>)
 8001cc8:	fb83 1302 	smull	r1, r3, r3, r2
 8001ccc:	1099      	asrs	r1, r3, #2
 8001cce:	17d3      	asrs	r3, r2, #31
 8001cd0:	1ac9      	subs	r1, r1, r3
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	1ad1      	subs	r1, r2, r3
 8001cdc:	b2cb      	uxtb	r3, r1
 8001cde:	3330      	adds	r3, #48	; 0x30
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	701a      	strb	r2, [r3, #0]
			numvalue = numvalue/10;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <float2ascii+0x164>)
 8001cea:	fb82 1203 	smull	r1, r2, r2, r3
 8001cee:	1092      	asrs	r2, r2, #2
 8001cf0:	17db      	asrs	r3, r3, #31
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	617b      	str	r3, [r7, #20]
		}
		data--;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
	for(i = 1;i <= length + length2;i++)
 8001cfc:	7ffb      	ldrb	r3, [r7, #31]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	77fb      	strb	r3, [r7, #31]
 8001d02:	7ffa      	ldrb	r2, [r7, #31]
 8001d04:	7cf9      	ldrb	r1, [r7, #19]
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	440b      	add	r3, r1
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	ddd2      	ble.n	8001cb4 <float2ascii+0x100>
	}
}
 8001d0e:	bf00      	nop
 8001d10:	bf00      	nop
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	66666667 	.word	0x66666667

08001d1c <Buffer_Clear>:

void Buffer_Clear(uint8_t *data, uint8_t datleng)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0 ; i < datleng ; i++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]
 8001d2c:	e005      	b.n	8001d3a <Buffer_Clear+0x1e>
		*data = 0;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0 ; i < datleng ; i++)
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	3301      	adds	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d3f5      	bcc.n	8001d2e <Buffer_Clear+0x12>
}
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <CRC_Cal>:
uint16_t CRC_Cal(unsigned char *buffer, unsigned int length)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b087      	sub	sp, #28
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	6039      	str	r1, [r7, #0]
     uint16_t i, j, temp_bit, temp_int, crc;
     crc = 0xFFFF;
 8001d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d5c:	827b      	strh	r3, [r7, #18]
     for (i=0; i < length; i++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	82fb      	strh	r3, [r7, #22]
 8001d62:	e025      	b.n	8001db0 <CRC_Cal+0x62>
     {
         temp_int = (char) *buffer++;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	823b      	strh	r3, [r7, #16]
         crc ^= temp_int;
 8001d6e:	8a7a      	ldrh	r2, [r7, #18]
 8001d70:	8a3b      	ldrh	r3, [r7, #16]
 8001d72:	4053      	eors	r3, r2
 8001d74:	827b      	strh	r3, [r7, #18]
         for(j=0; j<8; j++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	82bb      	strh	r3, [r7, #20]
 8001d7a:	e013      	b.n	8001da4 <CRC_Cal+0x56>
         {
             temp_bit = crc & 0x0001;
 8001d7c:	8a7b      	ldrh	r3, [r7, #18]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	81fb      	strh	r3, [r7, #14]
             crc >>= 1;
 8001d84:	8a7b      	ldrh	r3, [r7, #18]
 8001d86:	085b      	lsrs	r3, r3, #1
 8001d88:	827b      	strh	r3, [r7, #18]
             if (temp_bit != 0) crc ^= 0xA001;
 8001d8a:	89fb      	ldrh	r3, [r7, #14]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d006      	beq.n	8001d9e <CRC_Cal+0x50>
 8001d90:	8a7b      	ldrh	r3, [r7, #18]
 8001d92:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001d96:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	827b      	strh	r3, [r7, #18]
         for(j=0; j<8; j++)
 8001d9e:	8abb      	ldrh	r3, [r7, #20]
 8001da0:	3301      	adds	r3, #1
 8001da2:	82bb      	strh	r3, [r7, #20]
 8001da4:	8abb      	ldrh	r3, [r7, #20]
 8001da6:	2b07      	cmp	r3, #7
 8001da8:	d9e8      	bls.n	8001d7c <CRC_Cal+0x2e>
     for (i=0; i < length; i++)
 8001daa:	8afb      	ldrh	r3, [r7, #22]
 8001dac:	3301      	adds	r3, #1
 8001dae:	82fb      	strh	r3, [r7, #22]
 8001db0:	8afb      	ldrh	r3, [r7, #22]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8d5      	bhi.n	8001d64 <CRC_Cal+0x16>
         }
     }
     return crc;
 8001db8:	8a7b      	ldrh	r3, [r7, #18]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	371c      	adds	r7, #28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <Modbus_configframe>:

void Modbus_configframe(USART_TypeDef *USARTx,uint8_t slaveAddr, uint8_t FC, uint16_t startAddr, uint16_t numRegisters)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	4608      	mov	r0, r1
 8001dce:	4611      	mov	r1, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	70fb      	strb	r3, [r7, #3]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	70bb      	strb	r3, [r7, #2]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	803b      	strh	r3, [r7, #0]
  uint8_t txBuffer[8];

  txBuffer[0] = slaveAddr;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	733b      	strb	r3, [r7, #12]
  txBuffer[1] = FC;
 8001de2:	78bb      	ldrb	r3, [r7, #2]
 8001de4:	737b      	strb	r3, [r7, #13]
  txBuffer[2] = startAddr >> 8;
 8001de6:	883b      	ldrh	r3, [r7, #0]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	73bb      	strb	r3, [r7, #14]
  txBuffer[3] = startAddr & 0xFF;
 8001df0:	883b      	ldrh	r3, [r7, #0]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	73fb      	strb	r3, [r7, #15]
  txBuffer[4] = numRegisters >> 8;
 8001df6:	8c3b      	ldrh	r3, [r7, #32]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	743b      	strb	r3, [r7, #16]
  txBuffer[5] = numRegisters & 0xFF;
 8001e00:	8c3b      	ldrh	r3, [r7, #32]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	747b      	strb	r3, [r7, #17]

  // CRC
  uint16_t crc = CRC_Cal(txBuffer, 6);
 8001e06:	f107 030c 	add.w	r3, r7, #12
 8001e0a:	2106      	movs	r1, #6
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff9e 	bl	8001d4e <CRC_Cal>
 8001e12:	4603      	mov	r3, r0
 8001e14:	82fb      	strh	r3, [r7, #22]
  txBuffer[6] = crc & 0xFF;
 8001e16:	8afb      	ldrh	r3, [r7, #22]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	74bb      	strb	r3, [r7, #18]
  txBuffer[7] = crc >> 8;
 8001e1c:	8afb      	ldrh	r3, [r7, #22]
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	74fb      	strb	r3, [r7, #19]
  Frame_Send(USARTx, txBuffer, 8);
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff fdc7 	bl	80019c2 <Frame_Send>
}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <ModBus_Read>:

uint8_t ModBus_Read(USART_TypeDef *USARTx,uint32_t RX_Buff,uint8_t *RX_Index,uint8_t slaveAddr, uint8_t FC, uint16_t startAddr, uint16_t numRegisters)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	70fb      	strb	r3, [r7, #3]
	uint8_t repeat = 3;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	75fb      	strb	r3, [r7, #23]
	  while(repeat > 0)
 8001e4e:	e03a      	b.n	8001ec6 <ModBus_Read+0x8a>
	  {
		  *RX_Index = 0;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
		  Modbus_configframe(USARTx, slaveAddr, FC, startAddr, numRegisters);
 8001e56:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8001e58:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e5c:	78f9      	ldrb	r1, [r7, #3]
 8001e5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	4603      	mov	r3, r0
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f7ff ffad 	bl	8001dc4 <Modbus_configframe>
		  silent_interval = 0;
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <ModBus_Read+0x9c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
		  while(silent_interval < 500)
 8001e70:	e003      	b.n	8001e7a <ModBus_Read+0x3e>
			  if(*RX_Index != 0) break;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d105      	bne.n	8001e86 <ModBus_Read+0x4a>
		  while(silent_interval < 500)
 8001e7a:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <ModBus_Read+0x9c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e82:	d3f6      	bcc.n	8001e72 <ModBus_Read+0x36>
 8001e84:	e000      	b.n	8001e88 <ModBus_Read+0x4c>
			  if(*RX_Index != 0) break;
 8001e86:	bf00      	nop

		  if(*RX_Index == 0)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d103      	bne.n	8001e98 <ModBus_Read+0x5c>
		  {		//Timeout  -> Send again
			  repeat--;
 8001e90:	7dfb      	ldrb	r3, [r7, #23]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	75fb      	strb	r3, [r7, #23]
			  continue;
 8001e96:	e016      	b.n	8001ec6 <ModBus_Read+0x8a>
		  }
		  else
		  {					//Ok
			  silent_interval = 0;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <ModBus_Read+0x9c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
			  while(1)				// wait for received frame sucessfully
				  if(silent_interval >= 5) break;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <ModBus_Read+0x9c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d800      	bhi.n	8001ea8 <ModBus_Read+0x6c>
 8001ea6:	e7fa      	b.n	8001e9e <ModBus_Read+0x62>
 8001ea8:	bf00      	nop
			  if(CRC_Cal(RX_Buff, *RX_Index) == 0x0000)
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f7ff ff4b 	bl	8001d4e <CRC_Cal>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <ModBus_Read+0x86>
				  return Frame_OK;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e005      	b.n	8001ece <ModBus_Read+0x92>
			  else
				  return Frame_Error;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e003      	b.n	8001ece <ModBus_Read+0x92>
	  while(repeat > 0)
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1c1      	bne.n	8001e50 <ModBus_Read+0x14>
		  }
	  }
	  return Frame_Error;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000188 	.word	0x20000188

08001edc <Send_Data>:

void Send_Data()
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af04      	add	r7, sp, #16
	uint32_t Nhietdo_Temp;

	float DO_val;
	float Nhietdo_val;

	pH_Temp = 0;
 8001ee2:	4b4b      	ldr	r3, [pc, #300]	; (8002010 <Send_Data+0x134>)
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0 ; i < 10 ; i ++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	75fb      	strb	r3, [r7, #23]
 8001eee:	e01e      	b.n	8001f2e <Send_Data+0x52>
	{
		  pH_Voltage = Read_Voltage(A2, GAIN_4096, MODE_SINGLE_SHOT);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	2006      	movs	r0, #6
 8001ef6:	f000 f993 	bl	8002220 <Read_Voltage>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4a45      	ldr	r2, [pc, #276]	; (8002014 <Send_Data+0x138>)
 8001efe:	6013      	str	r3, [r2, #0]
		  silent_interval = 0;
 8001f00:	4b45      	ldr	r3, [pc, #276]	; (8002018 <Send_Data+0x13c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
		  while(silent_interval < 5);
 8001f06:	bf00      	nop
 8001f08:	4b43      	ldr	r3, [pc, #268]	; (8002018 <Send_Data+0x13c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d9fb      	bls.n	8001f08 <Send_Data+0x2c>
		  pH_Temp +=  pH_Voltage;
 8001f10:	4b3f      	ldr	r3, [pc, #252]	; (8002010 <Send_Data+0x134>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a3f      	ldr	r2, [pc, #252]	; (8002014 <Send_Data+0x138>)
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fd3c 	bl	8000998 <__addsf3>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b3a      	ldr	r3, [pc, #232]	; (8002010 <Send_Data+0x134>)
 8001f26:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0 ; i < 10 ; i ++)
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	75fb      	strb	r3, [r7, #23]
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
 8001f30:	2b09      	cmp	r3, #9
 8001f32:	d9dd      	bls.n	8001ef0 <Send_Data+0x14>
	}
	pH_Voltage = pH_Temp/10;
 8001f34:	4b36      	ldr	r3, [pc, #216]	; (8002010 <Send_Data+0x134>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4938      	ldr	r1, [pc, #224]	; (800201c <Send_Data+0x140>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fee8 	bl	8000d10 <__aeabi_fdiv>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b33      	ldr	r3, [pc, #204]	; (8002014 <Send_Data+0x138>)
 8001f46:	601a      	str	r2, [r3, #0]
	ph_Val = pH_Cal(pH_Voltage);
 8001f48:	4b32      	ldr	r3, [pc, #200]	; (8002014 <Send_Data+0x138>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 f90f 	bl	8002170 <pH_Cal>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4a32      	ldr	r2, [pc, #200]	; (8002020 <Send_Data+0x144>)
 8001f56:	6013      	str	r3, [r2, #0]

	float2ascii(value[2],ph_Val,2);
 8001f58:	4b31      	ldr	r3, [pc, #196]	; (8002020 <Send_Data+0x144>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4830      	ldr	r0, [pc, #192]	; (8002024 <Send_Data+0x148>)
 8001f62:	f7ff fe27 	bl	8001bb4 <float2ascii>
	//float2ascii(value[3],orp_Val,0);

	if(ModBus_Read(USART2, RX2_Buffer, &RX2_Temp, RK50004, 3, 0, 6) == Frame_OK)
 8001f66:	4930      	ldr	r1, [pc, #192]	; (8002028 <Send_Data+0x14c>)
 8001f68:	2306      	movs	r3, #6
 8001f6a:	9302      	str	r3, [sp, #8]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	2303      	movs	r3, #3
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	230a      	movs	r3, #10
 8001f76:	4a2d      	ldr	r2, [pc, #180]	; (800202c <Send_Data+0x150>)
 8001f78:	482d      	ldr	r0, [pc, #180]	; (8002030 <Send_Data+0x154>)
 8001f7a:	f7ff ff5f 	bl	8001e3c <ModBus_Read>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d13e      	bne.n	8002002 <Send_Data+0x126>
	{
		  if(RX2_Buffer[0] == RK50004 && RX2_Buffer[1] == 0x03 && RX2_Buffer[2] == 0x0C)
 8001f84:	4b28      	ldr	r3, [pc, #160]	; (8002028 <Send_Data+0x14c>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b0a      	cmp	r3, #10
 8001f8a:	d136      	bne.n	8001ffa <Send_Data+0x11e>
 8001f8c:	4b26      	ldr	r3, [pc, #152]	; (8002028 <Send_Data+0x14c>)
 8001f8e:	785b      	ldrb	r3, [r3, #1]
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d132      	bne.n	8001ffa <Send_Data+0x11e>
 8001f94:	4b24      	ldr	r3, [pc, #144]	; (8002028 <Send_Data+0x14c>)
 8001f96:	789b      	ldrb	r3, [r3, #2]
 8001f98:	2b0c      	cmp	r3, #12
 8001f9a:	d12e      	bne.n	8001ffa <Send_Data+0x11e>
		  {
			  DO_Temp = (RX2_Buffer[3] << 24) | (RX2_Buffer[4] << 16) | (RX2_Buffer[5] << 8) | RX2_Buffer[6];
 8001f9c:	4b22      	ldr	r3, [pc, #136]	; (8002028 <Send_Data+0x14c>)
 8001f9e:	78db      	ldrb	r3, [r3, #3]
 8001fa0:	061a      	lsls	r2, r3, #24
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <Send_Data+0x14c>)
 8001fa4:	791b      	ldrb	r3, [r3, #4]
 8001fa6:	041b      	lsls	r3, r3, #16
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <Send_Data+0x14c>)
 8001fac:	795b      	ldrb	r3, [r3, #5]
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <Send_Data+0x14c>)
 8001fb4:	7992      	ldrb	r2, [r2, #6]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60bb      	str	r3, [r7, #8]
			  DO_val = *(float*)&DO_Temp;
 8001fba:	f107 0308 	add.w	r3, r7, #8
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	613b      	str	r3, [r7, #16]
			  float2ascii(value[3], DO_val,  2);
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	6939      	ldr	r1, [r7, #16]
 8001fc6:	481b      	ldr	r0, [pc, #108]	; (8002034 <Send_Data+0x158>)
 8001fc8:	f7ff fdf4 	bl	8001bb4 <float2ascii>
			  Nhietdo_Temp = (RX2_Buffer[11] << 24) | (RX2_Buffer[12] << 16) | (RX2_Buffer[13] << 8) | RX2_Buffer[14];
 8001fcc:	4b16      	ldr	r3, [pc, #88]	; (8002028 <Send_Data+0x14c>)
 8001fce:	7adb      	ldrb	r3, [r3, #11]
 8001fd0:	061a      	lsls	r2, r3, #24
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <Send_Data+0x14c>)
 8001fd4:	7b1b      	ldrb	r3, [r3, #12]
 8001fd6:	041b      	lsls	r3, r3, #16
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <Send_Data+0x14c>)
 8001fdc:	7b5b      	ldrb	r3, [r3, #13]
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	4a11      	ldr	r2, [pc, #68]	; (8002028 <Send_Data+0x14c>)
 8001fe4:	7b92      	ldrb	r2, [r2, #14]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	607b      	str	r3, [r7, #4]
			  Nhietdo_val = *(float*)&Nhietdo_Temp;
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60fb      	str	r3, [r7, #12]
			  float2ascii(value[4], Nhietdo_val,  2);
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	68f9      	ldr	r1, [r7, #12]
 8001ff4:	4810      	ldr	r0, [pc, #64]	; (8002038 <Send_Data+0x15c>)
 8001ff6:	f7ff fddd 	bl	8001bb4 <float2ascii>
		  }
		  Buffer_Clear(RX2_Buffer,50);
 8001ffa:	2132      	movs	r1, #50	; 0x32
 8001ffc:	480a      	ldr	r0, [pc, #40]	; (8002028 <Send_Data+0x14c>)
 8001ffe:	f7ff fe8d 	bl	8001d1c <Buffer_Clear>
	}
	Frame_Process(5);
 8002002:	2005      	movs	r0, #5
 8002004:	f7ff fd02 	bl	8001a0c <Frame_Process>
	//Frame_Send(USART3, TX3_Buffer, TX3_Temp);

}
 8002008:	bf00      	nop
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000190 	.word	0x20000190
 8002014:	20000194 	.word	0x20000194
 8002018:	20000188 	.word	0x20000188
 800201c:	41200000 	.word	0x41200000
 8002020:	20000198 	.word	0x20000198
 8002024:	20000034 	.word	0x20000034
 8002028:	20000150 	.word	0x20000150
 800202c:	20000182 	.word	0x20000182
 8002030:	40004400 	.word	0x40004400
 8002034:	2000003e 	.word	0x2000003e
 8002038:	20000048 	.word	0x20000048

0800203c <USART3_RXNE_CallBack>:
void USART3_RXNE_CallBack()
{
 800203c:	b598      	push	{r3, r4, r7, lr}
 800203e:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART3))
 8002040:	482a      	ldr	r0, [pc, #168]	; (80020ec <USART3_RXNE_CallBack+0xb0>)
 8002042:	f7ff f841 	bl	80010c8 <LL_USART_IsActiveFlag_RXNE>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d03e      	beq.n	80020ca <USART3_RXNE_CallBack+0x8e>
	{
		RX3_Buffer[RX3_Temp++] = LL_USART_ReceiveData8(USART3);
 800204c:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <USART3_RXNE_CallBack+0xb4>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	b2d1      	uxtb	r1, r2
 8002054:	4a26      	ldr	r2, [pc, #152]	; (80020f0 <USART3_RXNE_CallBack+0xb4>)
 8002056:	7011      	strb	r1, [r2, #0]
 8002058:	461c      	mov	r4, r3
 800205a:	4824      	ldr	r0, [pc, #144]	; (80020ec <USART3_RXNE_CallBack+0xb0>)
 800205c:	f7ff f887 	bl	800116e <LL_USART_ReceiveData8>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <USART3_RXNE_CallBack+0xb8>)
 8002066:	551a      	strb	r2, [r3, r4]
		if(RX3_Buffer[0] != STX)	RX3_Temp = 0;
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <USART3_RXNE_CallBack+0xb8>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d003      	beq.n	8002078 <USART3_RXNE_CallBack+0x3c>
 8002070:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <USART3_RXNE_CallBack+0xb4>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
 8002076:	e025      	b.n	80020c4 <USART3_RXNE_CallBack+0x88>
		else
		{
			if((RX3_Temp > 2)&&(RX3_Buffer[2] == ETX))
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <USART3_RXNE_CallBack+0xb4>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d921      	bls.n	80020c4 <USART3_RXNE_CallBack+0x88>
 8002080:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <USART3_RXNE_CallBack+0xb8>)
 8002082:	789b      	ldrb	r3, [r3, #2]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d11d      	bne.n	80020c4 <USART3_RXNE_CallBack+0x88>
			{
				ACK_Send();
 8002088:	f7ff fc8e 	bl	80019a8 <ACK_Send>
				if(RX3_Buffer[1] == '0')
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <USART3_RXNE_CallBack+0xb8>)
 800208e:	785b      	ldrb	r3, [r3, #1]
 8002090:	2b30      	cmp	r3, #48	; 0x30
 8002092:	d103      	bne.n	800209c <USART3_RXNE_CallBack+0x60>
				{
					Relay_Off();
 8002094:	f7ff f9ae 	bl	80013f4 <Relay_Off>
					Led2_Off();
 8002098:	f7ff f97c 	bl	8001394 <Led2_Off>
				}
				if(RX3_Buffer[1] == '1')
 800209c:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <USART3_RXNE_CallBack+0xb8>)
 800209e:	785b      	ldrb	r3, [r3, #1]
 80020a0:	2b31      	cmp	r3, #49	; 0x31
 80020a2:	d103      	bne.n	80020ac <USART3_RXNE_CallBack+0x70>
				{
					Relay_On();
 80020a4:	f7ff f99a 	bl	80013dc <Relay_On>
					Led2_On();
 80020a8:	f7ff f968 	bl	800137c <Led2_On>
				}
				RX3_Temp = 0;
 80020ac:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <USART3_RXNE_CallBack+0xb4>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
				RX3_Buffer[0] = 0;
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <USART3_RXNE_CallBack+0xb8>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
				RX3_Buffer[1] = 0;
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <USART3_RXNE_CallBack+0xb8>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	705a      	strb	r2, [r3, #1]
				RX3_Buffer[2] = 0;
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <USART3_RXNE_CallBack+0xb8>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	709a      	strb	r2, [r3, #2]
			}
		}
		LL_USART_ClearFlag_RXNE(USART3);
 80020c4:	4809      	ldr	r0, [pc, #36]	; (80020ec <USART3_RXNE_CallBack+0xb0>)
 80020c6:	f7ff f823 	bl	8001110 <LL_USART_ClearFlag_RXNE>
	}

	if(RX3_Temp > 19)	RX3_Temp = 0;
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <USART3_RXNE_CallBack+0xb4>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b13      	cmp	r3, #19
 80020d0:	d902      	bls.n	80020d8 <USART3_RXNE_CallBack+0x9c>
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <USART3_RXNE_CallBack+0xb4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
	LL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80020d8:	4907      	ldr	r1, [pc, #28]	; (80020f8 <USART3_RXNE_CallBack+0xbc>)
 80020da:	4808      	ldr	r0, [pc, #32]	; (80020fc <USART3_RXNE_CallBack+0xc0>)
 80020dc:	f7ff f8f8 	bl	80012d0 <LL_GPIO_TogglePin>
	timeout = 0;
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <USART3_RXNE_CallBack+0xc4>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

}
 80020e6:	bf00      	nop
 80020e8:	bd98      	pop	{r3, r4, r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40004800 	.word	0x40004800
 80020f0:	2000014b 	.word	0x2000014b
 80020f4:	200000d4 	.word	0x200000d4
 80020f8:	04200020 	.word	0x04200020
 80020fc:	40011000 	.word	0x40011000
 8002100:	2000018c 	.word	0x2000018c

08002104 <USART2_RXNE_CallBack>:
void USART2_RXNE_CallBack()
{
 8002104:	b598      	push	{r3, r4, r7, lr}
 8002106:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART2))
 8002108:	4813      	ldr	r0, [pc, #76]	; (8002158 <USART2_RXNE_CallBack+0x54>)
 800210a:	f7fe ffdd 	bl	80010c8 <LL_USART_IsActiveFlag_RXNE>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01a      	beq.n	800214a <USART2_RXNE_CallBack+0x46>
	{
		RX2_Buffer[RX2_Temp++] = LL_USART_ReceiveData8(USART2);
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <USART2_RXNE_CallBack+0x58>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	b2d1      	uxtb	r1, r2
 800211c:	4a0f      	ldr	r2, [pc, #60]	; (800215c <USART2_RXNE_CallBack+0x58>)
 800211e:	7011      	strb	r1, [r2, #0]
 8002120:	461c      	mov	r4, r3
 8002122:	480d      	ldr	r0, [pc, #52]	; (8002158 <USART2_RXNE_CallBack+0x54>)
 8002124:	f7ff f823 	bl	800116e <LL_USART_ReceiveData8>
 8002128:	4603      	mov	r3, r0
 800212a:	461a      	mov	r2, r3
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <USART2_RXNE_CallBack+0x5c>)
 800212e:	551a      	strb	r2, [r3, r4]
		silent_interval = 0;
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <USART2_RXNE_CallBack+0x60>)
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
		if(RX2_Temp > 50)	RX2_Temp = 0;
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <USART2_RXNE_CallBack+0x58>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b32      	cmp	r3, #50	; 0x32
 800213c:	d902      	bls.n	8002144 <USART2_RXNE_CallBack+0x40>
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <USART2_RXNE_CallBack+0x58>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
		LL_USART_ClearFlag_RXNE(USART2);
 8002144:	4804      	ldr	r0, [pc, #16]	; (8002158 <USART2_RXNE_CallBack+0x54>)
 8002146:	f7fe ffe3 	bl	8001110 <LL_USART_ClearFlag_RXNE>
	}
	LL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800214a:	4907      	ldr	r1, [pc, #28]	; (8002168 <USART2_RXNE_CallBack+0x64>)
 800214c:	4807      	ldr	r0, [pc, #28]	; (800216c <USART2_RXNE_CallBack+0x68>)
 800214e:	f7ff f8bf 	bl	80012d0 <LL_GPIO_TogglePin>
    LL_USART_ClearFlag_RXNE(USART2);
    RX2_Temp++;
    silent_interval = 0;
    if(RX2_Temp > 50)	RX2_Temp = 0;
    LL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
}
 8002152:	bf00      	nop
 8002154:	bd98      	pop	{r3, r4, r7, pc}
 8002156:	bf00      	nop
 8002158:	40004400 	.word	0x40004400
 800215c:	20000182 	.word	0x20000182
 8002160:	20000150 	.word	0x20000150
 8002164:	20000188 	.word	0x20000188
 8002168:	04200020 	.word	0x04200020
 800216c:	40011000 	.word	0x40011000

08002170 <pH_Cal>:

float pH_Cal(float val)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	return PH_OFFSET + PH_1 + (PH_2 - PH_1)*(val - PH_V1)/(PH_V2 - PH_V1);
 8002178:	4919      	ldr	r1, [pc, #100]	; (80021e0 <pH_Cal+0x70>)
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe fc0a 	bl	8000994 <__aeabi_fsub>
 8002180:	4603      	mov	r3, r0
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f948 	bl	8000418 <__aeabi_f2d>
 8002188:	a311      	add	r3, pc, #68	; (adr r3, 80021d0 <pH_Cal+0x60>)
 800218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218e:	f7fe f99b 	bl	80004c8 <__aeabi_dmul>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <pH_Cal+0x74>)
 80021a0:	f7fe fabc 	bl	800071c <__aeabi_ddiv>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	a30a      	add	r3, pc, #40	; (adr r3, 80021d8 <pH_Cal+0x68>)
 80021ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b2:	f7fd ffd3 	bl	800015c <__adddf3>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	f7fe fb95 	bl	80008ec <__aeabi_d2f>
 80021c2:	4603      	mov	r3, r0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	f3af 8000 	nop.w
 80021d0:	3d70a3d7 	.word	0x3d70a3d7
 80021d4:	c012d70a 	.word	0xc012d70a
 80021d8:	33333333 	.word	0x33333333
 80021dc:	40243333 	.word	0x40243333
 80021e0:	4484e000 	.word	0x4484e000
 80021e4:	40872800 	.word	0x40872800

080021e8 <ADS1115_Init>:

uint8_t ADS1115_Init(uint8_t adc_in, uint8_t gain, uint8_t mode)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
 80021f2:	460b      	mov	r3, r1
 80021f4:	71bb      	strb	r3, [r7, #6]
 80021f6:	4613      	mov	r3, r2
 80021f8:	717b      	strb	r3, [r7, #5]
    return 0x80|mode|(adc_in << 4)|(gain << 1);
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	797b      	ldrb	r3, [r7, #5]
 8002202:	4313      	orrs	r3, r2
 8002204:	b2da      	uxtb	r2, r3
 8002206:	79bb      	ldrb	r3, [r7, #6]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	b2db      	uxtb	r3, r3
 800220c:	4313      	orrs	r3, r2
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002214:	b2db      	uxtb	r3, r3
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <Read_Voltage>:

float Read_Voltage(uint8_t adc_in, uint8_t gain, uint8_t mode)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af02      	add	r7, sp, #8
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
 800222a:	460b      	mov	r3, r1
 800222c:	71bb      	strb	r3, [r7, #6]
 800222e:	4613      	mov	r3, r2
 8002230:	717b      	strb	r3, [r7, #5]
	float factor;
	uint16_t ADS_Value;
	ADS_Buffer[0] = CONFIG_REGISTER;
 8002232:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <Read_Voltage+0xb4>)
 8002234:	2201      	movs	r2, #1
 8002236:	701a      	strb	r2, [r3, #0]
	ADS_Buffer[1] = ADS1115_Init(adc_in, gain, mode);
 8002238:	797a      	ldrb	r2, [r7, #5]
 800223a:	79b9      	ldrb	r1, [r7, #6]
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ffd2 	bl	80021e8 <ADS1115_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	461a      	mov	r2, r3
 8002248:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <Read_Voltage+0xb4>)
 800224a:	705a      	strb	r2, [r3, #1]
	ADS_Buffer[2] = LSB_REGISTER;
 800224c:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <Read_Voltage+0xb4>)
 800224e:	2283      	movs	r2, #131	; 0x83
 8002250:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADS_Buffer, 3, 100);
 8002252:	2364      	movs	r3, #100	; 0x64
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	2303      	movs	r3, #3
 8002258:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <Read_Voltage+0xb4>)
 800225a:	2190      	movs	r1, #144	; 0x90
 800225c:	481e      	ldr	r0, [pc, #120]	; (80022d8 <Read_Voltage+0xb8>)
 800225e:	f000 fd61 	bl	8002d24 <HAL_I2C_Master_Transmit>
	ADS_Buffer[0] = READ_CONVERSION;
 8002262:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <Read_Voltage+0xb4>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADS_Buffer, 1, 100);
 8002268:	2364      	movs	r3, #100	; 0x64
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2301      	movs	r3, #1
 800226e:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <Read_Voltage+0xb4>)
 8002270:	2190      	movs	r1, #144	; 0x90
 8002272:	4819      	ldr	r0, [pc, #100]	; (80022d8 <Read_Voltage+0xb8>)
 8002274:	f000 fd56 	bl	8002d24 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS << 1, ADS_Buffer, 2, 100);
 8002278:	2364      	movs	r3, #100	; 0x64
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2302      	movs	r3, #2
 800227e:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <Read_Voltage+0xb4>)
 8002280:	2190      	movs	r1, #144	; 0x90
 8002282:	4815      	ldr	r0, [pc, #84]	; (80022d8 <Read_Voltage+0xb8>)
 8002284:	f000 fe4c 	bl	8002f20 <HAL_I2C_Master_Receive>
	ADS_Value = ADS_Buffer[0] << 8 | ADS_Buffer[1];
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <Read_Voltage+0xb4>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	b21a      	sxth	r2, r3
 8002290:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <Read_Voltage+0xb4>)
 8002292:	785b      	ldrb	r3, [r3, #1]
 8002294:	b21b      	sxth	r3, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	b21b      	sxth	r3, r3
 800229a:	817b      	strh	r3, [r7, #10]
	if (ADS_Value < 0)	ADS_Value = 0;
	if (gain == 0x00)	factor = 6114.0/32767.0;
 800229c:	79bb      	ldrb	r3, [r7, #6]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <Read_Voltage+0x88>
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <Read_Voltage+0xbc>)
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	e007      	b.n	80022b8 <Read_Voltage+0x98>
	else if (gain == 0x01)	factor = 4096.0/32767.0;
 80022a8:	79bb      	ldrb	r3, [r7, #6]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d102      	bne.n	80022b4 <Read_Voltage+0x94>
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <Read_Voltage+0xc0>)
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	e001      	b.n	80022b8 <Read_Voltage+0x98>
	else	factor = 2048.0/32767.0;
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <Read_Voltage+0xc4>)
 80022b6:	60fb      	str	r3, [r7, #12]
	return 	factor * (float)ADS_Value;
 80022b8:	897b      	ldrh	r3, [r7, #10]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fc1c 	bl	8000af8 <__aeabi_ui2f>
 80022c0:	4603      	mov	r3, r0
 80022c2:	68f9      	ldr	r1, [r7, #12]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe fc6f 	bl	8000ba8 <__aeabi_fmul>
 80022ca:	4603      	mov	r3, r0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	2000019c 	.word	0x2000019c
 80022d8:	20000080 	.word	0x20000080
 80022dc:	3e3f117e 	.word	0x3e3f117e
 80022e0:	3e000100 	.word	0x3e000100
 80022e4:	3d800100 	.word	0x3d800100

080022e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022ec:	b672      	cpsid	i
}
 80022ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  Led1_On();
 80022f0:	f7ff f838 	bl	8001364 <Led1_On>
	  Led2_On();
 80022f4:	f7ff f842 	bl	800137c <Led2_On>
	  Led3_On();
 80022f8:	f7ff f858 	bl	80013ac <Led3_On>
	  Led1_On();
 80022fc:	e7f8      	b.n	80022f0 <Error_Handler+0x8>
	...

08002300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_MspInit+0x5c>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	4a14      	ldr	r2, [pc, #80]	; (800235c <HAL_MspInit+0x5c>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6193      	str	r3, [r2, #24]
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_MspInit+0x5c>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_MspInit+0x5c>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a0e      	ldr	r2, [pc, #56]	; (800235c <HAL_MspInit+0x5c>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002328:	61d3      	str	r3, [r2, #28]
 800232a:	4b0c      	ldr	r3, [pc, #48]	; (800235c <HAL_MspInit+0x5c>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_MspInit+0x60>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <HAL_MspInit+0x60>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000

08002364 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a15      	ldr	r2, [pc, #84]	; (80023d4 <HAL_I2C_MspInit+0x70>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d123      	bne.n	80023cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <HAL_I2C_MspInit+0x74>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <HAL_I2C_MspInit+0x74>)
 800238a:	f043 0308 	orr.w	r3, r3, #8
 800238e:	6193      	str	r3, [r2, #24]
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_I2C_MspInit+0x74>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800239c:	23c0      	movs	r3, #192	; 0xc0
 800239e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023a0:	2312      	movs	r3, #18
 80023a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	4619      	mov	r1, r3
 80023ae:	480b      	ldr	r0, [pc, #44]	; (80023dc <HAL_I2C_MspInit+0x78>)
 80023b0:	f000 f9f0 	bl	8002794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <HAL_I2C_MspInit+0x74>)
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	4a07      	ldr	r2, [pc, #28]	; (80023d8 <HAL_I2C_MspInit+0x74>)
 80023ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023be:	61d3      	str	r3, [r2, #28]
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_I2C_MspInit+0x74>)
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023cc:	bf00      	nop
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40005400 	.word	0x40005400
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40010c00 	.word	0x40010c00

080023e0 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80023e8:	4b07      	ldr	r3, [pc, #28]	; (8002408 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4013      	ands	r3, r2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	bf0c      	ite	eq
 80023f6:	2301      	moveq	r3, #1
 80023f8:	2300      	movne	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40010400 	.word	0x40010400

0800240c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002414:	4a03      	ldr	r2, [pc, #12]	; (8002424 <LL_EXTI_ClearFlag_0_31+0x18>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6153      	str	r3, [r2, #20]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	40010400 	.word	0x40010400

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800242c:	e7fe      	b.n	800242c <NMI_Handler+0x4>

0800242e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <MemManage_Handler+0x4>

0800243a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <BusFault_Handler+0x4>

08002440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <UsageFault_Handler+0x4>

08002446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr

0800246a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SysTick_Interrupt();
 800246e:	f7ff fa25 	bl	80018bc <SysTick_Interrupt>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002472:	f000 f88f 	bl	8002594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}

0800247a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  FeedBack();
 800247e:	f7ff fb79 	bl	8001b74 <FeedBack>
  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8002482:	2002      	movs	r0, #2
 8002484:	f7ff ffac 	bl	80023e0 <LL_EXTI_IsActiveFlag_0_31>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 800248e:	2002      	movs	r0, #2
 8002490:	f7ff ffbc 	bl	800240c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}

08002498 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */
	USART2_RXNE_CallBack();
 800249c:	f7ff fe32 	bl	8002104 <USART2_RXNE_CallBack>
  /* USER CODE END USART2_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */
	USART3_RXNE_CallBack();
 80024a8:	f7ff fdc8 	bl	800203c <USART3_RXNE_CallBack>
  /* USER CODE END USART3_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <Reset_Handler>:
 80024bc:	f7ff fff8 	bl	80024b0 <SystemInit>
 80024c0:	480b      	ldr	r0, [pc, #44]	; (80024f0 <LoopFillZerobss+0xe>)
 80024c2:	490c      	ldr	r1, [pc, #48]	; (80024f4 <LoopFillZerobss+0x12>)
 80024c4:	4a0c      	ldr	r2, [pc, #48]	; (80024f8 <LoopFillZerobss+0x16>)
 80024c6:	2300      	movs	r3, #0
 80024c8:	e002      	b.n	80024d0 <LoopCopyDataInit>

080024ca <CopyDataInit>:
 80024ca:	58d4      	ldr	r4, [r2, r3]
 80024cc:	50c4      	str	r4, [r0, r3]
 80024ce:	3304      	adds	r3, #4

080024d0 <LoopCopyDataInit>:
 80024d0:	18c4      	adds	r4, r0, r3
 80024d2:	428c      	cmp	r4, r1
 80024d4:	d3f9      	bcc.n	80024ca <CopyDataInit>
 80024d6:	4a09      	ldr	r2, [pc, #36]	; (80024fc <LoopFillZerobss+0x1a>)
 80024d8:	4c09      	ldr	r4, [pc, #36]	; (8002500 <LoopFillZerobss+0x1e>)
 80024da:	2300      	movs	r3, #0
 80024dc:	e001      	b.n	80024e2 <LoopFillZerobss>

080024de <FillZerobss>:
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	3204      	adds	r2, #4

080024e2 <LoopFillZerobss>:
 80024e2:	42a2      	cmp	r2, r4
 80024e4:	d3fb      	bcc.n	80024de <FillZerobss>
 80024e6:	f002 fb41 	bl	8004b6c <__libc_init_array>
 80024ea:	f7fe ff8f 	bl	800140c <main>
 80024ee:	4770      	bx	lr
 80024f0:	20000000 	.word	0x20000000
 80024f4:	20000064 	.word	0x20000064
 80024f8:	08004c10 	.word	0x08004c10
 80024fc:	20000064 	.word	0x20000064
 8002500:	200001ac 	.word	0x200001ac

08002504 <ADC1_2_IRQHandler>:
 8002504:	e7fe      	b.n	8002504 <ADC1_2_IRQHandler>
	...

08002508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_Init+0x28>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a07      	ldr	r2, [pc, #28]	; (8002530 <HAL_Init+0x28>)
 8002512:	f043 0310 	orr.w	r3, r3, #16
 8002516:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002518:	2003      	movs	r0, #3
 800251a:	f000 f907 	bl	800272c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800251e:	2002      	movs	r0, #2
 8002520:	f000 f808 	bl	8002534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002524:	f7ff feec 	bl	8002300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40022000 	.word	0x40022000

08002534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_InitTick+0x54>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_InitTick+0x58>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4619      	mov	r1, r3
 8002546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254a:	fbb3 f3f1 	udiv	r3, r3, r1
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f911 	bl	800277a <HAL_SYSTICK_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e00e      	b.n	8002580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b0f      	cmp	r3, #15
 8002566:	d80a      	bhi.n	800257e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002568:	2200      	movs	r2, #0
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	f04f 30ff 	mov.w	r0, #4294967295
 8002570:	f000 f8e7 	bl	8002742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002574:	4a06      	ldr	r2, [pc, #24]	; (8002590 <HAL_InitTick+0x5c>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e000      	b.n	8002580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000058 	.word	0x20000058
 800258c:	20000060 	.word	0x20000060
 8002590:	2000005c 	.word	0x2000005c

08002594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_IncTick+0x1c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_IncTick+0x20>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	4a03      	ldr	r2, [pc, #12]	; (80025b4 <HAL_IncTick+0x20>)
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	20000060 	.word	0x20000060
 80025b4:	200001a8 	.word	0x200001a8

080025b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return uwTick;
 80025bc:	4b02      	ldr	r3, [pc, #8]	; (80025c8 <HAL_GetTick+0x10>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	200001a8 	.word	0x200001a8

080025cc <__NVIC_SetPriorityGrouping>:
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e8:	4013      	ands	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	60d3      	str	r3, [r2, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_GetPriorityGrouping>:
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <__NVIC_GetPriorityGrouping+0x18>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	f003 0307 	and.w	r3, r3, #7
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_SetPriority>:
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	2b00      	cmp	r3, #0
 8002642:	db0a      	blt.n	800265a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	490c      	ldr	r1, [pc, #48]	; (800267c <__NVIC_SetPriority+0x4c>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	0112      	lsls	r2, r2, #4
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	440b      	add	r3, r1
 8002654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002658:	e00a      	b.n	8002670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4908      	ldr	r1, [pc, #32]	; (8002680 <__NVIC_SetPriority+0x50>)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	3b04      	subs	r3, #4
 8002668:	0112      	lsls	r2, r2, #4
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	440b      	add	r3, r1
 800266e:	761a      	strb	r2, [r3, #24]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <NVIC_EncodePriority>:
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f1c3 0307 	rsb	r3, r3, #7
 800269e:	2b04      	cmp	r3, #4
 80026a0:	bf28      	it	cs
 80026a2:	2304      	movcs	r3, #4
 80026a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d902      	bls.n	80026b4 <NVIC_EncodePriority+0x30>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3b03      	subs	r3, #3
 80026b2:	e000      	b.n	80026b6 <NVIC_EncodePriority+0x32>
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	f04f 32ff 	mov.w	r2, #4294967295
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	401a      	ands	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	43d9      	mvns	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	4313      	orrs	r3, r2
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f8:	d301      	bcc.n	80026fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00f      	b.n	800271e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fe:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <SysTick_Config+0x40>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002706:	210f      	movs	r1, #15
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	f7ff ff90 	bl	8002630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <SysTick_Config+0x40>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <SysTick_Config+0x40>)
 8002718:	2207      	movs	r2, #7
 800271a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	e000e010 	.word	0xe000e010

0800272c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ff49 	bl	80025cc <__NVIC_SetPriorityGrouping>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002754:	f7ff ff5e 	bl	8002614 <__NVIC_GetPriorityGrouping>
 8002758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	6978      	ldr	r0, [r7, #20]
 8002760:	f7ff ff90 	bl	8002684 <NVIC_EncodePriority>
 8002764:	4602      	mov	r2, r0
 8002766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff5f 	bl	8002630 <__NVIC_SetPriority>
}
 8002772:	bf00      	nop
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff ffb0 	bl	80026e8 <SysTick_Config>
 8002788:	4603      	mov	r3, r0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002794:	b480      	push	{r7}
 8002796:	b08b      	sub	sp, #44	; 0x2c
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800279e:	2300      	movs	r3, #0
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a6:	e169      	b.n	8002a7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027a8:	2201      	movs	r2, #1
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	f040 8158 	bne.w	8002a76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4a9a      	ldr	r2, [pc, #616]	; (8002a34 <HAL_GPIO_Init+0x2a0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d05e      	beq.n	800288e <HAL_GPIO_Init+0xfa>
 80027d0:	4a98      	ldr	r2, [pc, #608]	; (8002a34 <HAL_GPIO_Init+0x2a0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d875      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 80027d6:	4a98      	ldr	r2, [pc, #608]	; (8002a38 <HAL_GPIO_Init+0x2a4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d058      	beq.n	800288e <HAL_GPIO_Init+0xfa>
 80027dc:	4a96      	ldr	r2, [pc, #600]	; (8002a38 <HAL_GPIO_Init+0x2a4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d86f      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 80027e2:	4a96      	ldr	r2, [pc, #600]	; (8002a3c <HAL_GPIO_Init+0x2a8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d052      	beq.n	800288e <HAL_GPIO_Init+0xfa>
 80027e8:	4a94      	ldr	r2, [pc, #592]	; (8002a3c <HAL_GPIO_Init+0x2a8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d869      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 80027ee:	4a94      	ldr	r2, [pc, #592]	; (8002a40 <HAL_GPIO_Init+0x2ac>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d04c      	beq.n	800288e <HAL_GPIO_Init+0xfa>
 80027f4:	4a92      	ldr	r2, [pc, #584]	; (8002a40 <HAL_GPIO_Init+0x2ac>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d863      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 80027fa:	4a92      	ldr	r2, [pc, #584]	; (8002a44 <HAL_GPIO_Init+0x2b0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d046      	beq.n	800288e <HAL_GPIO_Init+0xfa>
 8002800:	4a90      	ldr	r2, [pc, #576]	; (8002a44 <HAL_GPIO_Init+0x2b0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d85d      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 8002806:	2b12      	cmp	r3, #18
 8002808:	d82a      	bhi.n	8002860 <HAL_GPIO_Init+0xcc>
 800280a:	2b12      	cmp	r3, #18
 800280c:	d859      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 800280e:	a201      	add	r2, pc, #4	; (adr r2, 8002814 <HAL_GPIO_Init+0x80>)
 8002810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002814:	0800288f 	.word	0x0800288f
 8002818:	08002869 	.word	0x08002869
 800281c:	0800287b 	.word	0x0800287b
 8002820:	080028bd 	.word	0x080028bd
 8002824:	080028c3 	.word	0x080028c3
 8002828:	080028c3 	.word	0x080028c3
 800282c:	080028c3 	.word	0x080028c3
 8002830:	080028c3 	.word	0x080028c3
 8002834:	080028c3 	.word	0x080028c3
 8002838:	080028c3 	.word	0x080028c3
 800283c:	080028c3 	.word	0x080028c3
 8002840:	080028c3 	.word	0x080028c3
 8002844:	080028c3 	.word	0x080028c3
 8002848:	080028c3 	.word	0x080028c3
 800284c:	080028c3 	.word	0x080028c3
 8002850:	080028c3 	.word	0x080028c3
 8002854:	080028c3 	.word	0x080028c3
 8002858:	08002871 	.word	0x08002871
 800285c:	08002885 	.word	0x08002885
 8002860:	4a79      	ldr	r2, [pc, #484]	; (8002a48 <HAL_GPIO_Init+0x2b4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002866:	e02c      	b.n	80028c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	623b      	str	r3, [r7, #32]
          break;
 800286e:	e029      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	3304      	adds	r3, #4
 8002876:	623b      	str	r3, [r7, #32]
          break;
 8002878:	e024      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	3308      	adds	r3, #8
 8002880:	623b      	str	r3, [r7, #32]
          break;
 8002882:	e01f      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	330c      	adds	r3, #12
 800288a:	623b      	str	r3, [r7, #32]
          break;
 800288c:	e01a      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002896:	2304      	movs	r3, #4
 8002898:	623b      	str	r3, [r7, #32]
          break;
 800289a:	e013      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028a4:	2308      	movs	r3, #8
 80028a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	611a      	str	r2, [r3, #16]
          break;
 80028ae:	e009      	b.n	80028c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028b0:	2308      	movs	r3, #8
 80028b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	615a      	str	r2, [r3, #20]
          break;
 80028ba:	e003      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
          break;
 80028c0:	e000      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          break;
 80028c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2bff      	cmp	r3, #255	; 0xff
 80028c8:	d801      	bhi.n	80028ce <HAL_GPIO_Init+0x13a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	e001      	b.n	80028d2 <HAL_GPIO_Init+0x13e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3304      	adds	r3, #4
 80028d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	2bff      	cmp	r3, #255	; 0xff
 80028d8:	d802      	bhi.n	80028e0 <HAL_GPIO_Init+0x14c>
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	e002      	b.n	80028e6 <HAL_GPIO_Init+0x152>
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	3b08      	subs	r3, #8
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	210f      	movs	r1, #15
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	401a      	ands	r2, r3
 80028f8:	6a39      	ldr	r1, [r7, #32]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002900:	431a      	orrs	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 80b1 	beq.w	8002a76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002914:	4b4d      	ldr	r3, [pc, #308]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	4a4c      	ldr	r2, [pc, #304]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6193      	str	r3, [r2, #24]
 8002920:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800292c:	4a48      	ldr	r2, [pc, #288]	; (8002a50 <HAL_GPIO_Init+0x2bc>)
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	3302      	adds	r3, #2
 8002934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002938:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	220f      	movs	r2, #15
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4013      	ands	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a40      	ldr	r2, [pc, #256]	; (8002a54 <HAL_GPIO_Init+0x2c0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d013      	beq.n	8002980 <HAL_GPIO_Init+0x1ec>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a3f      	ldr	r2, [pc, #252]	; (8002a58 <HAL_GPIO_Init+0x2c4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00d      	beq.n	800297c <HAL_GPIO_Init+0x1e8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a3e      	ldr	r2, [pc, #248]	; (8002a5c <HAL_GPIO_Init+0x2c8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d007      	beq.n	8002978 <HAL_GPIO_Init+0x1e4>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a3d      	ldr	r2, [pc, #244]	; (8002a60 <HAL_GPIO_Init+0x2cc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d101      	bne.n	8002974 <HAL_GPIO_Init+0x1e0>
 8002970:	2303      	movs	r3, #3
 8002972:	e006      	b.n	8002982 <HAL_GPIO_Init+0x1ee>
 8002974:	2304      	movs	r3, #4
 8002976:	e004      	b.n	8002982 <HAL_GPIO_Init+0x1ee>
 8002978:	2302      	movs	r3, #2
 800297a:	e002      	b.n	8002982 <HAL_GPIO_Init+0x1ee>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_GPIO_Init+0x1ee>
 8002980:	2300      	movs	r3, #0
 8002982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002984:	f002 0203 	and.w	r2, r2, #3
 8002988:	0092      	lsls	r2, r2, #2
 800298a:	4093      	lsls	r3, r2
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002992:	492f      	ldr	r1, [pc, #188]	; (8002a50 <HAL_GPIO_Init+0x2bc>)
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d006      	beq.n	80029ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	492c      	ldr	r1, [pc, #176]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	608b      	str	r3, [r1, #8]
 80029b8:	e006      	b.n	80029c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029ba:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	4928      	ldr	r1, [pc, #160]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d006      	beq.n	80029e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029d4:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	4922      	ldr	r1, [pc, #136]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60cb      	str	r3, [r1, #12]
 80029e0:	e006      	b.n	80029f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029e2:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	491e      	ldr	r1, [pc, #120]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d006      	beq.n	8002a0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	4918      	ldr	r1, [pc, #96]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
 8002a08:	e006      	b.n	8002a18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	4914      	ldr	r1, [pc, #80]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d021      	beq.n	8002a68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	490e      	ldr	r1, [pc, #56]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]
 8002a30:	e021      	b.n	8002a76 <HAL_GPIO_Init+0x2e2>
 8002a32:	bf00      	nop
 8002a34:	10320000 	.word	0x10320000
 8002a38:	10310000 	.word	0x10310000
 8002a3c:	10220000 	.word	0x10220000
 8002a40:	10210000 	.word	0x10210000
 8002a44:	10120000 	.word	0x10120000
 8002a48:	10110000 	.word	0x10110000
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40010000 	.word	0x40010000
 8002a54:	40010800 	.word	0x40010800
 8002a58:	40010c00 	.word	0x40010c00
 8002a5c:	40011000 	.word	0x40011000
 8002a60:	40011400 	.word	0x40011400
 8002a64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_GPIO_Init+0x304>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	4909      	ldr	r1, [pc, #36]	; (8002a98 <HAL_GPIO_Init+0x304>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	3301      	adds	r3, #1
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	fa22 f303 	lsr.w	r3, r2, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f47f ae8e 	bne.w	80027a8 <HAL_GPIO_Init+0x14>
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	372c      	adds	r7, #44	; 0x2c
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	40010400 	.word	0x40010400

08002a9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e12b      	b.n	8002d06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff fc4e 	bl	8002364 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2224      	movs	r2, #36	; 0x24
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0201 	bic.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002afe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b00:	f001 fbca 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 8002b04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4a81      	ldr	r2, [pc, #516]	; (8002d10 <HAL_I2C_Init+0x274>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d807      	bhi.n	8002b20 <HAL_I2C_Init+0x84>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4a80      	ldr	r2, [pc, #512]	; (8002d14 <HAL_I2C_Init+0x278>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	bf94      	ite	ls
 8002b18:	2301      	movls	r3, #1
 8002b1a:	2300      	movhi	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	e006      	b.n	8002b2e <HAL_I2C_Init+0x92>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4a7d      	ldr	r2, [pc, #500]	; (8002d18 <HAL_I2C_Init+0x27c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	bf94      	ite	ls
 8002b28:	2301      	movls	r3, #1
 8002b2a:	2300      	movhi	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e0e7      	b.n	8002d06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a78      	ldr	r2, [pc, #480]	; (8002d1c <HAL_I2C_Init+0x280>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	0c9b      	lsrs	r3, r3, #18
 8002b40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4a6a      	ldr	r2, [pc, #424]	; (8002d10 <HAL_I2C_Init+0x274>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d802      	bhi.n	8002b70 <HAL_I2C_Init+0xd4>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	e009      	b.n	8002b84 <HAL_I2C_Init+0xe8>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	4a69      	ldr	r2, [pc, #420]	; (8002d20 <HAL_I2C_Init+0x284>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	3301      	adds	r3, #1
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	495c      	ldr	r1, [pc, #368]	; (8002d10 <HAL_I2C_Init+0x274>)
 8002ba0:	428b      	cmp	r3, r1
 8002ba2:	d819      	bhi.n	8002bd8 <HAL_I2C_Init+0x13c>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1e59      	subs	r1, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bb2:	1c59      	adds	r1, r3, #1
 8002bb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bb8:	400b      	ands	r3, r1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_I2C_Init+0x138>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1e59      	subs	r1, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd2:	e051      	b.n	8002c78 <HAL_I2C_Init+0x1dc>
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	e04f      	b.n	8002c78 <HAL_I2C_Init+0x1dc>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d111      	bne.n	8002c04 <HAL_I2C_Init+0x168>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1e58      	subs	r0, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	440b      	add	r3, r1
 8002bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2301      	moveq	r3, #1
 8002bfe:	2300      	movne	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	e012      	b.n	8002c2a <HAL_I2C_Init+0x18e>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	1e58      	subs	r0, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	0099      	lsls	r1, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf0c      	ite	eq
 8002c24:	2301      	moveq	r3, #1
 8002c26:	2300      	movne	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Init+0x196>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e022      	b.n	8002c78 <HAL_I2C_Init+0x1dc>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10e      	bne.n	8002c58 <HAL_I2C_Init+0x1bc>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1e58      	subs	r0, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	440b      	add	r3, r1
 8002c48:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c56:	e00f      	b.n	8002c78 <HAL_I2C_Init+0x1dc>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1e58      	subs	r0, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	0099      	lsls	r1, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	6809      	ldr	r1, [r1, #0]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ca6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6911      	ldr	r1, [r2, #16]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68d2      	ldr	r2, [r2, #12]
 8002cb2:	4311      	orrs	r1, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695a      	ldr	r2, [r3, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	000186a0 	.word	0x000186a0
 8002d14:	001e847f 	.word	0x001e847f
 8002d18:	003d08ff 	.word	0x003d08ff
 8002d1c:	431bde83 	.word	0x431bde83
 8002d20:	10624dd3 	.word	0x10624dd3

08002d24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	460b      	mov	r3, r1
 8002d32:	817b      	strh	r3, [r7, #10]
 8002d34:	4613      	mov	r3, r2
 8002d36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d38:	f7ff fc3e 	bl	80025b8 <HAL_GetTick>
 8002d3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	f040 80e0 	bne.w	8002f0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	2319      	movs	r3, #25
 8002d52:	2201      	movs	r2, #1
 8002d54:	4970      	ldr	r1, [pc, #448]	; (8002f18 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 fc9e 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
 8002d64:	e0d3      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_I2C_Master_Transmit+0x50>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e0cc      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x1ea>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d007      	beq.n	8002d9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0201 	orr.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2221      	movs	r2, #33	; 0x21
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2210      	movs	r2, #16
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	893a      	ldrh	r2, [r7, #8]
 8002dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4a50      	ldr	r2, [pc, #320]	; (8002f1c <HAL_I2C_Master_Transmit+0x1f8>)
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ddc:	8979      	ldrh	r1, [r7, #10]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	6a3a      	ldr	r2, [r7, #32]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fb08 	bl	80033f8 <I2C_MasterRequestWrite>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e08d      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e08:	e066      	b.n	8002ed8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	6a39      	ldr	r1, [r7, #32]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fd5c 	bl	80038cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d107      	bne.n	8002e32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e06b      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	781a      	ldrb	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d11b      	bne.n	8002eac <HAL_I2C_Master_Transmit+0x188>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d017      	beq.n	8002eac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	6a39      	ldr	r1, [r7, #32]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 fd53 	bl	800395c <I2C_WaitOnBTFFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00d      	beq.n	8002ed8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d107      	bne.n	8002ed4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e01a      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d194      	bne.n	8002e0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e000      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f0c:	2302      	movs	r3, #2
  }
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	00100002 	.word	0x00100002
 8002f1c:	ffff0000 	.word	0xffff0000

08002f20 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08c      	sub	sp, #48	; 0x30
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	817b      	strh	r3, [r7, #10]
 8002f30:	4613      	mov	r3, r2
 8002f32:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f38:	f7ff fb3e 	bl	80025b8 <HAL_GetTick>
 8002f3c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	f040 824b 	bne.w	80033e2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	2319      	movs	r3, #25
 8002f52:	2201      	movs	r2, #1
 8002f54:	497f      	ldr	r1, [pc, #508]	; (8003154 <HAL_I2C_Master_Receive+0x234>)
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fb9e 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
 8002f64:	e23e      	b.n	80033e4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_I2C_Master_Receive+0x54>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e237      	b.n	80033e4 <HAL_I2C_Master_Receive+0x4c4>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d007      	beq.n	8002f9a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2222      	movs	r2, #34	; 0x22
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2210      	movs	r2, #16
 8002fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	893a      	ldrh	r2, [r7, #8]
 8002fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a5f      	ldr	r2, [pc, #380]	; (8003158 <HAL_I2C_Master_Receive+0x238>)
 8002fda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fdc:	8979      	ldrh	r1, [r7, #10]
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fa8a 	bl	80034fc <I2C_MasterRequestRead>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e1f8      	b.n	80033e4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d113      	bne.n	8003022 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e1cc      	b.n	80033bc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003026:	2b01      	cmp	r3, #1
 8003028:	d11e      	bne.n	8003068 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003038:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800303a:	b672      	cpsid	i
}
 800303c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303e:	2300      	movs	r3, #0
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003062:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003064:	b662      	cpsie	i
}
 8003066:	e035      	b.n	80030d4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	2b02      	cmp	r3, #2
 800306e:	d11e      	bne.n	80030ae <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800307e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003080:	b672      	cpsid	i
}
 8003082:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030aa:	b662      	cpsie	i
}
 80030ac:	e012      	b.n	80030d4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80030d4:	e172      	b.n	80033bc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030da:	2b03      	cmp	r3, #3
 80030dc:	f200 811f 	bhi.w	800331e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d123      	bne.n	8003130 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fc7d 	bl	80039ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e173      	b.n	80033e4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800312e:	e145      	b.n	80033bc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003134:	2b02      	cmp	r3, #2
 8003136:	d152      	bne.n	80031de <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	2200      	movs	r2, #0
 8003140:	4906      	ldr	r1, [pc, #24]	; (800315c <HAL_I2C_Master_Receive+0x23c>)
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 faa8 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e148      	b.n	80033e4 <HAL_I2C_Master_Receive+0x4c4>
 8003152:	bf00      	nop
 8003154:	00100002 	.word	0x00100002
 8003158:	ffff0000 	.word	0xffff0000
 800315c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003160:	b672      	cpsid	i
}
 8003162:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003172:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80031a6:	b662      	cpsie	i
}
 80031a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031dc:	e0ee      	b.n	80033bc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	2200      	movs	r2, #0
 80031e6:	4981      	ldr	r1, [pc, #516]	; (80033ec <HAL_I2C_Master_Receive+0x4cc>)
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fa55 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0f5      	b.n	80033e4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003206:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003208:	b672      	cpsid	i
}
 800320a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691a      	ldr	r2, [r3, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800323e:	4b6c      	ldr	r3, [pc, #432]	; (80033f0 <HAL_I2C_Master_Receive+0x4d0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	08db      	lsrs	r3, r3, #3
 8003244:	4a6b      	ldr	r2, [pc, #428]	; (80033f4 <HAL_I2C_Master_Receive+0x4d4>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	0a1a      	lsrs	r2, r3, #8
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00da      	lsls	r2, r3, #3
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	3b01      	subs	r3, #1
 800325c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d118      	bne.n	8003296 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f043 0220 	orr.w	r2, r3, #32
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003286:	b662      	cpsie	i
}
 8003288:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e0a6      	b.n	80033e4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d1d9      	bne.n	8003258 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032e6:	b662      	cpsie	i
}
 80032e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800331c:	e04e      	b.n	80033bc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fb62 	bl	80039ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e058      	b.n	80033e4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b04      	cmp	r3, #4
 8003370:	d124      	bne.n	80033bc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003376:	2b03      	cmp	r3, #3
 8003378:	d107      	bne.n	800338a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003388:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f47f ae88 	bne.w	80030d6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	e000      	b.n	80033e4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
  }
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3728      	adds	r7, #40	; 0x28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	00010004 	.word	0x00010004
 80033f0:	20000058 	.word	0x20000058
 80033f4:	14f8b589 	.word	0x14f8b589

080033f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	607a      	str	r2, [r7, #4]
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	460b      	mov	r3, r1
 8003406:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b08      	cmp	r3, #8
 8003412:	d006      	beq.n	8003422 <I2C_MasterRequestWrite+0x2a>
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d003      	beq.n	8003422 <I2C_MasterRequestWrite+0x2a>
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003420:	d108      	bne.n	8003434 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e00b      	b.n	800344c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	2b12      	cmp	r3, #18
 800343a:	d107      	bne.n	800344c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800344a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f91d 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00d      	beq.n	8003480 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003472:	d103      	bne.n	800347c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e035      	b.n	80034ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003488:	d108      	bne.n	800349c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800348a:	897b      	ldrh	r3, [r7, #10]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003498:	611a      	str	r2, [r3, #16]
 800349a:	e01b      	b.n	80034d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800349c:	897b      	ldrh	r3, [r7, #10]
 800349e:	11db      	asrs	r3, r3, #7
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f003 0306 	and.w	r3, r3, #6
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f063 030f 	orn	r3, r3, #15
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	490e      	ldr	r1, [pc, #56]	; (80034f4 <I2C_MasterRequestWrite+0xfc>)
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f966 	bl	800378c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e010      	b.n	80034ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034ca:	897b      	ldrh	r3, [r7, #10]
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4907      	ldr	r1, [pc, #28]	; (80034f8 <I2C_MasterRequestWrite+0x100>)
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f956 	bl	800378c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	00010008 	.word	0x00010008
 80034f8:	00010002 	.word	0x00010002

080034fc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af02      	add	r7, sp, #8
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	460b      	mov	r3, r1
 800350a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003520:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b08      	cmp	r3, #8
 8003526:	d006      	beq.n	8003536 <I2C_MasterRequestRead+0x3a>
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d003      	beq.n	8003536 <I2C_MasterRequestRead+0x3a>
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003534:	d108      	bne.n	8003548 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	e00b      	b.n	8003560 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	2b11      	cmp	r3, #17
 800354e:	d107      	bne.n	8003560 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800355e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 f893 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00d      	beq.n	8003594 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003586:	d103      	bne.n	8003590 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800358e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e079      	b.n	8003688 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800359c:	d108      	bne.n	80035b0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800359e:	897b      	ldrh	r3, [r7, #10]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	611a      	str	r2, [r3, #16]
 80035ae:	e05f      	b.n	8003670 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035b0:	897b      	ldrh	r3, [r7, #10]
 80035b2:	11db      	asrs	r3, r3, #7
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f003 0306 	and.w	r3, r3, #6
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f063 030f 	orn	r3, r3, #15
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	4930      	ldr	r1, [pc, #192]	; (8003690 <I2C_MasterRequestRead+0x194>)
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f8dc 	bl	800378c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e054      	b.n	8003688 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035de:	897b      	ldrh	r3, [r7, #10]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	4929      	ldr	r1, [pc, #164]	; (8003694 <I2C_MasterRequestRead+0x198>)
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f8cc 	bl	800378c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e044      	b.n	8003688 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003622:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f831 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00d      	beq.n	8003658 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364a:	d103      	bne.n	8003654 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003652:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e017      	b.n	8003688 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003658:	897b      	ldrh	r3, [r7, #10]
 800365a:	11db      	asrs	r3, r3, #7
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f003 0306 	and.w	r3, r3, #6
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f063 030e 	orn	r3, r3, #14
 8003668:	b2da      	uxtb	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4907      	ldr	r1, [pc, #28]	; (8003694 <I2C_MasterRequestRead+0x198>)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f888 	bl	800378c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	00010008 	.word	0x00010008
 8003694:	00010002 	.word	0x00010002

08003698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036a8:	e048      	b.n	800373c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d044      	beq.n	800373c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7fe ff81 	bl	80025b8 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d139      	bne.n	800373c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	0c1b      	lsrs	r3, r3, #16
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d10d      	bne.n	80036ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	43da      	mvns	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4013      	ands	r3, r2
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	e00c      	b.n	8003708 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	43da      	mvns	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4013      	ands	r3, r2
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	429a      	cmp	r2, r3
 800370c:	d116      	bne.n	800373c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e023      	b.n	8003784 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	0c1b      	lsrs	r3, r3, #16
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d10d      	bne.n	8003762 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	43da      	mvns	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4013      	ands	r3, r2
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	bf0c      	ite	eq
 8003758:	2301      	moveq	r3, #1
 800375a:	2300      	movne	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	461a      	mov	r2, r3
 8003760:	e00c      	b.n	800377c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	43da      	mvns	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4013      	ands	r3, r2
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	429a      	cmp	r2, r3
 8003780:	d093      	beq.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800379a:	e071      	b.n	8003880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037aa:	d123      	bne.n	80037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	f043 0204 	orr.w	r2, r3, #4
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e067      	b.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fa:	d041      	beq.n	8003880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fc:	f7fe fedc 	bl	80025b8 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	429a      	cmp	r2, r3
 800380a:	d302      	bcc.n	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d136      	bne.n	8003880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	d10c      	bne.n	8003836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	43da      	mvns	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4013      	ands	r3, r2
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	bf14      	ite	ne
 800382e:	2301      	movne	r3, #1
 8003830:	2300      	moveq	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	e00b      	b.n	800384e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	43da      	mvns	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4013      	ands	r3, r2
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf14      	ite	ne
 8003848:	2301      	movne	r3, #1
 800384a:	2300      	moveq	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d016      	beq.n	8003880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	f043 0220 	orr.w	r2, r3, #32
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e021      	b.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	0c1b      	lsrs	r3, r3, #16
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b01      	cmp	r3, #1
 8003888:	d10c      	bne.n	80038a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	43da      	mvns	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	4013      	ands	r3, r2
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e00b      	b.n	80038bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	43da      	mvns	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4013      	ands	r3, r2
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	bf14      	ite	ne
 80038b6:	2301      	movne	r3, #1
 80038b8:	2300      	moveq	r3, #0
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f47f af6d 	bne.w	800379c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d8:	e034      	b.n	8003944 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 f8e3 	bl	8003aa6 <I2C_IsAcknowledgeFailed>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e034      	b.n	8003954 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f0:	d028      	beq.n	8003944 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f2:	f7fe fe61 	bl	80025b8 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d302      	bcc.n	8003908 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d11d      	bne.n	8003944 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003912:	2b80      	cmp	r3, #128	; 0x80
 8003914:	d016      	beq.n	8003944 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f043 0220 	orr.w	r2, r3, #32
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e007      	b.n	8003954 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394e:	2b80      	cmp	r3, #128	; 0x80
 8003950:	d1c3      	bne.n	80038da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003968:	e034      	b.n	80039d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f89b 	bl	8003aa6 <I2C_IsAcknowledgeFailed>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e034      	b.n	80039e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d028      	beq.n	80039d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003982:	f7fe fe19 	bl	80025b8 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	d302      	bcc.n	8003998 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d11d      	bne.n	80039d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d016      	beq.n	80039d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f043 0220 	orr.w	r2, r3, #32
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e007      	b.n	80039e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d1c3      	bne.n	800396a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039f8:	e049      	b.n	8003a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d119      	bne.n	8003a3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0210 	mvn.w	r2, #16
 8003a10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e030      	b.n	8003a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3c:	f7fe fdbc 	bl	80025b8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d302      	bcc.n	8003a52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11d      	bne.n	8003a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5c:	2b40      	cmp	r3, #64	; 0x40
 8003a5e:	d016      	beq.n	8003a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f043 0220 	orr.w	r2, r3, #32
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e007      	b.n	8003a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a98:	2b40      	cmp	r3, #64	; 0x40
 8003a9a:	d1ae      	bne.n	80039fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003abc:	d11b      	bne.n	8003af6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ac6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f043 0204 	orr.w	r2, r3, #4
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr
	...

08003b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e272      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8087 	beq.w	8003c32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b24:	4b92      	ldr	r3, [pc, #584]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 030c 	and.w	r3, r3, #12
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d00c      	beq.n	8003b4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b30:	4b8f      	ldr	r3, [pc, #572]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 030c 	and.w	r3, r3, #12
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d112      	bne.n	8003b62 <HAL_RCC_OscConfig+0x5e>
 8003b3c:	4b8c      	ldr	r3, [pc, #560]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b48:	d10b      	bne.n	8003b62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4a:	4b89      	ldr	r3, [pc, #548]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d06c      	beq.n	8003c30 <HAL_RCC_OscConfig+0x12c>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d168      	bne.n	8003c30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e24c      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCC_OscConfig+0x76>
 8003b6c:	4b80      	ldr	r3, [pc, #512]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a7f      	ldr	r2, [pc, #508]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	e02e      	b.n	8003bd8 <HAL_RCC_OscConfig+0xd4>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x98>
 8003b82:	4b7b      	ldr	r3, [pc, #492]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a7a      	ldr	r2, [pc, #488]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	4b78      	ldr	r3, [pc, #480]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a77      	ldr	r2, [pc, #476]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e01d      	b.n	8003bd8 <HAL_RCC_OscConfig+0xd4>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0xbc>
 8003ba6:	4b72      	ldr	r3, [pc, #456]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a71      	ldr	r2, [pc, #452]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4b6f      	ldr	r3, [pc, #444]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a6e      	ldr	r2, [pc, #440]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCC_OscConfig+0xd4>
 8003bc0:	4b6b      	ldr	r3, [pc, #428]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a6a      	ldr	r2, [pc, #424]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	4b68      	ldr	r3, [pc, #416]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a67      	ldr	r2, [pc, #412]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d013      	beq.n	8003c08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fe fcea 	bl	80025b8 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be8:	f7fe fce6 	bl	80025b8 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	; 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e200      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	4b5d      	ldr	r3, [pc, #372]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0xe4>
 8003c06:	e014      	b.n	8003c32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c08:	f7fe fcd6 	bl	80025b8 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c10:	f7fe fcd2 	bl	80025b8 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	; 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e1ec      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c22:	4b53      	ldr	r3, [pc, #332]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x10c>
 8003c2e:	e000      	b.n	8003c32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d063      	beq.n	8003d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c3e:	4b4c      	ldr	r3, [pc, #304]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c4a:	4b49      	ldr	r3, [pc, #292]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d11c      	bne.n	8003c90 <HAL_RCC_OscConfig+0x18c>
 8003c56:	4b46      	ldr	r3, [pc, #280]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d116      	bne.n	8003c90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c62:	4b43      	ldr	r3, [pc, #268]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_RCC_OscConfig+0x176>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e1c0      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7a:	4b3d      	ldr	r3, [pc, #244]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4939      	ldr	r1, [pc, #228]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8e:	e03a      	b.n	8003d06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d020      	beq.n	8003cda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c98:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9e:	f7fe fc8b 	bl	80025b8 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca6:	f7fe fc87 	bl	80025b8 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e1a1      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb8:	4b2d      	ldr	r3, [pc, #180]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc4:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4927      	ldr	r1, [pc, #156]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	600b      	str	r3, [r1, #0]
 8003cd8:	e015      	b.n	8003d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cda:	4b26      	ldr	r3, [pc, #152]	; (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fe fc6a 	bl	80025b8 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce8:	f7fe fc66 	bl	80025b8 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e180      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfa:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d03a      	beq.n	8003d88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d019      	beq.n	8003d4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d1a:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <HAL_RCC_OscConfig+0x274>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d20:	f7fe fc4a 	bl	80025b8 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d28:	f7fe fc46 	bl	80025b8 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e160      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d46:	2001      	movs	r0, #1
 8003d48:	f000 faba 	bl	80042c0 <RCC_Delay>
 8003d4c:	e01c      	b.n	8003d88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <HAL_RCC_OscConfig+0x274>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d54:	f7fe fc30 	bl	80025b8 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5a:	e00f      	b.n	8003d7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d5c:	f7fe fc2c 	bl	80025b8 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d908      	bls.n	8003d7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e146      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>
 8003d6e:	bf00      	nop
 8003d70:	40021000 	.word	0x40021000
 8003d74:	42420000 	.word	0x42420000
 8003d78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d7c:	4b92      	ldr	r3, [pc, #584]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e9      	bne.n	8003d5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 80a6 	beq.w	8003ee2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d96:	2300      	movs	r3, #0
 8003d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d9a:	4b8b      	ldr	r3, [pc, #556]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10d      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da6:	4b88      	ldr	r3, [pc, #544]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	4a87      	ldr	r2, [pc, #540]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db0:	61d3      	str	r3, [r2, #28]
 8003db2:	4b85      	ldr	r3, [pc, #532]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc2:	4b82      	ldr	r3, [pc, #520]	; (8003fcc <HAL_RCC_OscConfig+0x4c8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d118      	bne.n	8003e00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dce:	4b7f      	ldr	r3, [pc, #508]	; (8003fcc <HAL_RCC_OscConfig+0x4c8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a7e      	ldr	r2, [pc, #504]	; (8003fcc <HAL_RCC_OscConfig+0x4c8>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dda:	f7fe fbed 	bl	80025b8 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de2:	f7fe fbe9 	bl	80025b8 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b64      	cmp	r3, #100	; 0x64
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e103      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df4:	4b75      	ldr	r3, [pc, #468]	; (8003fcc <HAL_RCC_OscConfig+0x4c8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d106      	bne.n	8003e16 <HAL_RCC_OscConfig+0x312>
 8003e08:	4b6f      	ldr	r3, [pc, #444]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	4a6e      	ldr	r2, [pc, #440]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6213      	str	r3, [r2, #32]
 8003e14:	e02d      	b.n	8003e72 <HAL_RCC_OscConfig+0x36e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x334>
 8003e1e:	4b6a      	ldr	r3, [pc, #424]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	4a69      	ldr	r2, [pc, #420]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	6213      	str	r3, [r2, #32]
 8003e2a:	4b67      	ldr	r3, [pc, #412]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	4a66      	ldr	r2, [pc, #408]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003e30:	f023 0304 	bic.w	r3, r3, #4
 8003e34:	6213      	str	r3, [r2, #32]
 8003e36:	e01c      	b.n	8003e72 <HAL_RCC_OscConfig+0x36e>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	2b05      	cmp	r3, #5
 8003e3e:	d10c      	bne.n	8003e5a <HAL_RCC_OscConfig+0x356>
 8003e40:	4b61      	ldr	r3, [pc, #388]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	4a60      	ldr	r2, [pc, #384]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003e46:	f043 0304 	orr.w	r3, r3, #4
 8003e4a:	6213      	str	r3, [r2, #32]
 8003e4c:	4b5e      	ldr	r3, [pc, #376]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	4a5d      	ldr	r2, [pc, #372]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6213      	str	r3, [r2, #32]
 8003e58:	e00b      	b.n	8003e72 <HAL_RCC_OscConfig+0x36e>
 8003e5a:	4b5b      	ldr	r3, [pc, #364]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	4a5a      	ldr	r2, [pc, #360]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	6213      	str	r3, [r2, #32]
 8003e66:	4b58      	ldr	r3, [pc, #352]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	4a57      	ldr	r2, [pc, #348]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003e6c:	f023 0304 	bic.w	r3, r3, #4
 8003e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d015      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7a:	f7fe fb9d 	bl	80025b8 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fe fb99 	bl	80025b8 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0b1      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e98:	4b4b      	ldr	r3, [pc, #300]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0ee      	beq.n	8003e82 <HAL_RCC_OscConfig+0x37e>
 8003ea4:	e014      	b.n	8003ed0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea6:	f7fe fb87 	bl	80025b8 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eac:	e00a      	b.n	8003ec4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fe fb83 	bl	80025b8 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e09b      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec4:	4b40      	ldr	r3, [pc, #256]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1ee      	bne.n	8003eae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d105      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed6:	4b3c      	ldr	r3, [pc, #240]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	4a3b      	ldr	r2, [pc, #236]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 8087 	beq.w	8003ffa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eec:	4b36      	ldr	r3, [pc, #216]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d061      	beq.n	8003fbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d146      	bne.n	8003f8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f00:	4b33      	ldr	r3, [pc, #204]	; (8003fd0 <HAL_RCC_OscConfig+0x4cc>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f06:	f7fe fb57 	bl	80025b8 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0e:	f7fe fb53 	bl	80025b8 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e06d      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f20:	4b29      	ldr	r3, [pc, #164]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f0      	bne.n	8003f0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f34:	d108      	bne.n	8003f48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f36:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	4921      	ldr	r1, [pc, #132]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f48:	4b1f      	ldr	r3, [pc, #124]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a19      	ldr	r1, [r3, #32]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	491b      	ldr	r1, [pc, #108]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f60:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <HAL_RCC_OscConfig+0x4cc>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f66:	f7fe fb27 	bl	80025b8 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6e:	f7fe fb23 	bl	80025b8 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e03d      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f80:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0f0      	beq.n	8003f6e <HAL_RCC_OscConfig+0x46a>
 8003f8c:	e035      	b.n	8003ffa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8e:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <HAL_RCC_OscConfig+0x4cc>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f94:	f7fe fb10 	bl	80025b8 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fe fb0c 	bl	80025b8 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e026      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fae:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <HAL_RCC_OscConfig+0x4c4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x498>
 8003fba:	e01e      	b.n	8003ffa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d107      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e019      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40007000 	.word	0x40007000
 8003fd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_RCC_OscConfig+0x500>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d001      	beq.n	8003ffa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40021000 	.word	0x40021000

08004008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0d0      	b.n	80041be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800401c:	4b6a      	ldr	r3, [pc, #424]	; (80041c8 <HAL_RCC_ClockConfig+0x1c0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d910      	bls.n	800404c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b67      	ldr	r3, [pc, #412]	; (80041c8 <HAL_RCC_ClockConfig+0x1c0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 0207 	bic.w	r2, r3, #7
 8004032:	4965      	ldr	r1, [pc, #404]	; (80041c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800403a:	4b63      	ldr	r3, [pc, #396]	; (80041c8 <HAL_RCC_ClockConfig+0x1c0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0b8      	b.n	80041be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d020      	beq.n	800409a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004064:	4b59      	ldr	r3, [pc, #356]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4a58      	ldr	r2, [pc, #352]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 800406a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800406e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800407c:	4b53      	ldr	r3, [pc, #332]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4a52      	ldr	r2, [pc, #328]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 8004082:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004086:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004088:	4b50      	ldr	r3, [pc, #320]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	494d      	ldr	r1, [pc, #308]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 8004096:	4313      	orrs	r3, r2
 8004098:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d040      	beq.n	8004128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d107      	bne.n	80040be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	4b47      	ldr	r3, [pc, #284]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d115      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e07f      	b.n	80041be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d107      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c6:	4b41      	ldr	r3, [pc, #260]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e073      	b.n	80041be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d6:	4b3d      	ldr	r3, [pc, #244]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e06b      	b.n	80041be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040e6:	4b39      	ldr	r3, [pc, #228]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f023 0203 	bic.w	r2, r3, #3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	4936      	ldr	r1, [pc, #216]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040f8:	f7fe fa5e 	bl	80025b8 <HAL_GetTick>
 80040fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fe:	e00a      	b.n	8004116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004100:	f7fe fa5a 	bl	80025b8 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	f241 3288 	movw	r2, #5000	; 0x1388
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e053      	b.n	80041be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004116:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 020c 	and.w	r2, r3, #12
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	429a      	cmp	r2, r3
 8004126:	d1eb      	bne.n	8004100 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004128:	4b27      	ldr	r3, [pc, #156]	; (80041c8 <HAL_RCC_ClockConfig+0x1c0>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d210      	bcs.n	8004158 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004136:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 0207 	bic.w	r2, r3, #7
 800413e:	4922      	ldr	r1, [pc, #136]	; (80041c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	4313      	orrs	r3, r2
 8004144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004146:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e032      	b.n	80041be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d008      	beq.n	8004176 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004164:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4916      	ldr	r1, [pc, #88]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 8004172:	4313      	orrs	r3, r2
 8004174:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004182:	4b12      	ldr	r3, [pc, #72]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	490e      	ldr	r1, [pc, #56]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004196:	f000 f821 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 800419a:	4602      	mov	r2, r0
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	490a      	ldr	r1, [pc, #40]	; (80041d0 <HAL_RCC_ClockConfig+0x1c8>)
 80041a8:	5ccb      	ldrb	r3, [r1, r3]
 80041aa:	fa22 f303 	lsr.w	r3, r2, r3
 80041ae:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <HAL_RCC_ClockConfig+0x1cc>)
 80041b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_RCC_ClockConfig+0x1d0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fe f9bc 	bl	8002534 <HAL_InitTick>

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40022000 	.word	0x40022000
 80041cc:	40021000 	.word	0x40021000
 80041d0:	08004bdc 	.word	0x08004bdc
 80041d4:	20000058 	.word	0x20000058
 80041d8:	2000005c 	.word	0x2000005c

080041dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	2300      	movs	r3, #0
 80041f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041f6:	4b1e      	ldr	r3, [pc, #120]	; (8004270 <HAL_RCC_GetSysClockFreq+0x94>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f003 030c 	and.w	r3, r3, #12
 8004202:	2b04      	cmp	r3, #4
 8004204:	d002      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x30>
 8004206:	2b08      	cmp	r3, #8
 8004208:	d003      	beq.n	8004212 <HAL_RCC_GetSysClockFreq+0x36>
 800420a:	e027      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800420c:	4b19      	ldr	r3, [pc, #100]	; (8004274 <HAL_RCC_GetSysClockFreq+0x98>)
 800420e:	613b      	str	r3, [r7, #16]
      break;
 8004210:	e027      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	0c9b      	lsrs	r3, r3, #18
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	4a17      	ldr	r2, [pc, #92]	; (8004278 <HAL_RCC_GetSysClockFreq+0x9c>)
 800421c:	5cd3      	ldrb	r3, [r2, r3]
 800421e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d010      	beq.n	800424c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800422a:	4b11      	ldr	r3, [pc, #68]	; (8004270 <HAL_RCC_GetSysClockFreq+0x94>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	0c5b      	lsrs	r3, r3, #17
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	4a11      	ldr	r2, [pc, #68]	; (800427c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004236:	5cd3      	ldrb	r3, [r2, r3]
 8004238:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a0d      	ldr	r2, [pc, #52]	; (8004274 <HAL_RCC_GetSysClockFreq+0x98>)
 800423e:	fb03 f202 	mul.w	r2, r3, r2
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	e004      	b.n	8004256 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a0c      	ldr	r2, [pc, #48]	; (8004280 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004250:	fb02 f303 	mul.w	r3, r2, r3
 8004254:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	613b      	str	r3, [r7, #16]
      break;
 800425a:	e002      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCC_GetSysClockFreq+0x98>)
 800425e:	613b      	str	r3, [r7, #16]
      break;
 8004260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004262:	693b      	ldr	r3, [r7, #16]
}
 8004264:	4618      	mov	r0, r3
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40021000 	.word	0x40021000
 8004274:	007a1200 	.word	0x007a1200
 8004278:	08004bf4 	.word	0x08004bf4
 800427c:	08004c04 	.word	0x08004c04
 8004280:	003d0900 	.word	0x003d0900

08004284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004288:	4b02      	ldr	r3, [pc, #8]	; (8004294 <HAL_RCC_GetHCLKFreq+0x10>)
 800428a:	681b      	ldr	r3, [r3, #0]
}
 800428c:	4618      	mov	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr
 8004294:	20000058 	.word	0x20000058

08004298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800429c:	f7ff fff2 	bl	8004284 <HAL_RCC_GetHCLKFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	0a1b      	lsrs	r3, r3, #8
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	4903      	ldr	r1, [pc, #12]	; (80042bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40021000 	.word	0x40021000
 80042bc:	08004bec 	.word	0x08004bec

080042c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042c8:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <RCC_Delay+0x34>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <RCC_Delay+0x38>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	0a5b      	lsrs	r3, r3, #9
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042dc:	bf00      	nop
  }
  while (Delay --);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	1e5a      	subs	r2, r3, #1
 80042e2:	60fa      	str	r2, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f9      	bne.n	80042dc <RCC_Delay+0x1c>
}
 80042e8:	bf00      	nop
 80042ea:	bf00      	nop
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr
 80042f4:	20000058 	.word	0x20000058
 80042f8:	10624dd3 	.word	0x10624dd3

080042fc <LL_EXTI_EnableIT_0_31>:
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <LL_EXTI_EnableIT_0_31+0x20>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4904      	ldr	r1, [pc, #16]	; (800431c <LL_EXTI_EnableIT_0_31+0x20>)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4313      	orrs	r3, r2
 800430e:	600b      	str	r3, [r1, #0]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010400 	.word	0x40010400

08004320 <LL_EXTI_DisableIT_0_31>:
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <LL_EXTI_DisableIT_0_31+0x20>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	43db      	mvns	r3, r3
 8004330:	4903      	ldr	r1, [pc, #12]	; (8004340 <LL_EXTI_DisableIT_0_31+0x20>)
 8004332:	4013      	ands	r3, r2
 8004334:	600b      	str	r3, [r1, #0]
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr
 8004340:	40010400 	.word	0x40010400

08004344 <LL_EXTI_EnableEvent_0_31>:
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <LL_EXTI_EnableEvent_0_31+0x20>)
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	4904      	ldr	r1, [pc, #16]	; (8004364 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40010400 	.word	0x40010400

08004368 <LL_EXTI_DisableEvent_0_31>:
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <LL_EXTI_DisableEvent_0_31+0x20>)
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	43db      	mvns	r3, r3
 8004378:	4903      	ldr	r1, [pc, #12]	; (8004388 <LL_EXTI_DisableEvent_0_31+0x20>)
 800437a:	4013      	ands	r3, r2
 800437c:	604b      	str	r3, [r1, #4]
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr
 8004388:	40010400 	.word	0x40010400

0800438c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	4904      	ldr	r1, [pc, #16]	; (80043ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40010400 	.word	0x40010400

080043b0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	43db      	mvns	r3, r3
 80043c0:	4903      	ldr	r1, [pc, #12]	; (80043d0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bc80      	pop	{r7}
 80043ce:	4770      	bx	lr
 80043d0:	40010400 	.word	0x40010400

080043d4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	4904      	ldr	r1, [pc, #16]	; (80043f4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60cb      	str	r3, [r1, #12]
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40010400 	.word	0x40010400

080043f8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	43db      	mvns	r3, r3
 8004408:	4903      	ldr	r1, [pc, #12]	; (8004418 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800440a:	4013      	ands	r3, r2
 800440c:	60cb      	str	r3, [r1, #12]
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr
 8004418:	40010400 	.word	0x40010400

0800441c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004424:	2300      	movs	r3, #0
 8004426:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	791b      	ldrb	r3, [r3, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d065      	beq.n	80044fc <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d06c      	beq.n	8004512 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	795b      	ldrb	r3, [r3, #5]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d01c      	beq.n	800447a <LL_EXTI_Init+0x5e>
 8004440:	2b02      	cmp	r3, #2
 8004442:	dc25      	bgt.n	8004490 <LL_EXTI_Init+0x74>
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <LL_EXTI_Init+0x32>
 8004448:	2b01      	cmp	r3, #1
 800444a:	d00b      	beq.n	8004464 <LL_EXTI_Init+0x48>
 800444c:	e020      	b.n	8004490 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff ff88 	bl	8004368 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff ff4d 	bl	80042fc <LL_EXTI_EnableIT_0_31>
          break;
 8004462:	e018      	b.n	8004496 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff ff59 	bl	8004320 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff ff66 	bl	8004344 <LL_EXTI_EnableEvent_0_31>
          break;
 8004478:	e00d      	b.n	8004496 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff ff3c 	bl	80042fc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff ff5b 	bl	8004344 <LL_EXTI_EnableEvent_0_31>
          break;
 800448e:	e002      	b.n	8004496 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
          break;
 8004494:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	799b      	ldrb	r3, [r3, #6]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d039      	beq.n	8004512 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	799b      	ldrb	r3, [r3, #6]
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d01c      	beq.n	80044e0 <LL_EXTI_Init+0xc4>
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	dc25      	bgt.n	80044f6 <LL_EXTI_Init+0xda>
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d002      	beq.n	80044b4 <LL_EXTI_Init+0x98>
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d00b      	beq.n	80044ca <LL_EXTI_Init+0xae>
 80044b2:	e020      	b.n	80044f6 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff ff9d 	bl	80043f8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff ff62 	bl	800438c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80044c8:	e024      	b.n	8004514 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff ff6e 	bl	80043b0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff ff7b 	bl	80043d4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80044de:	e019      	b.n	8004514 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff ff51 	bl	800438c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff ff70 	bl	80043d4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80044f4:	e00e      	b.n	8004514 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
            break;
 80044fa:	e00b      	b.n	8004514 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff ff0d 	bl	8004320 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff ff2c 	bl	8004368 <LL_EXTI_DisableEvent_0_31>
 8004510:	e000      	b.n	8004514 <LL_EXTI_Init+0xf8>
      }
 8004512:	bf00      	nop
  }
  return status;
 8004514:	7bfb      	ldrb	r3, [r7, #15]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <LL_GPIO_SetPinMode>:
{
 800451e:	b490      	push	{r4, r7}
 8004520:	b088      	sub	sp, #32
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	461a      	mov	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	0e1b      	lsrs	r3, r3, #24
 8004532:	4413      	add	r3, r2
 8004534:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8004536:	6822      	ldr	r2, [r4, #0]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	fa93 f3a3 	rbit	r3, r3
 8004542:	613b      	str	r3, [r7, #16]
  return result;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	fab3 f383 	clz	r3, r3
 800454a:	b2db      	uxtb	r3, r3
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	210f      	movs	r1, #15
 8004550:	fa01 f303 	lsl.w	r3, r1, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	401a      	ands	r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	fa93 f3a3 	rbit	r3, r3
 8004562:	61bb      	str	r3, [r7, #24]
  return result;
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	4313      	orrs	r3, r2
 8004576:	6023      	str	r3, [r4, #0]
}
 8004578:	bf00      	nop
 800457a:	3720      	adds	r7, #32
 800457c:	46bd      	mov	sp, r7
 800457e:	bc90      	pop	{r4, r7}
 8004580:	4770      	bx	lr

08004582 <LL_GPIO_SetPinSpeed>:
{
 8004582:	b490      	push	{r4, r7}
 8004584:	b088      	sub	sp, #32
 8004586:	af00      	add	r7, sp, #0
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	461a      	mov	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	0e1b      	lsrs	r3, r3, #24
 8004596:	4413      	add	r3, r2
 8004598:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800459a:	6822      	ldr	r2, [r4, #0]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	fa93 f3a3 	rbit	r3, r3
 80045a6:	613b      	str	r3, [r7, #16]
  return result;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	fab3 f383 	clz	r3, r3
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	2103      	movs	r1, #3
 80045b4:	fa01 f303 	lsl.w	r3, r1, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	401a      	ands	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	fa93 f3a3 	rbit	r3, r3
 80045c6:	61bb      	str	r3, [r7, #24]
  return result;
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	fab3 f383 	clz	r3, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	fa01 f303 	lsl.w	r3, r1, r3
 80045d8:	4313      	orrs	r3, r2
 80045da:	6023      	str	r3, [r4, #0]
}
 80045dc:	bf00      	nop
 80045de:	3720      	adds	r7, #32
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc90      	pop	{r4, r7}
 80045e4:	4770      	bx	lr

080045e6 <LL_GPIO_SetPinOutputType>:
{
 80045e6:	b490      	push	{r4, r7}
 80045e8:	b088      	sub	sp, #32
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	461a      	mov	r2, r3
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	0e1b      	lsrs	r3, r3, #24
 80045fa:	4413      	add	r3, r2
 80045fc:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80045fe:	6822      	ldr	r2, [r4, #0]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	fa93 f3a3 	rbit	r3, r3
 800460a:	613b      	str	r3, [r7, #16]
  return result;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	fab3 f383 	clz	r3, r3
 8004612:	b2db      	uxtb	r3, r3
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	2104      	movs	r1, #4
 8004618:	fa01 f303 	lsl.w	r3, r1, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	401a      	ands	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	fa93 f3a3 	rbit	r3, r3
 800462a:	61bb      	str	r3, [r7, #24]
  return result;
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	fab3 f383 	clz	r3, r3
 8004632:	b2db      	uxtb	r3, r3
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	fa01 f303 	lsl.w	r3, r1, r3
 800463c:	4313      	orrs	r3, r2
 800463e:	6023      	str	r3, [r4, #0]
}
 8004640:	bf00      	nop
 8004642:	3720      	adds	r7, #32
 8004644:	46bd      	mov	sp, r7
 8004646:	bc90      	pop	{r4, r7}
 8004648:	4770      	bx	lr

0800464a <LL_GPIO_SetPinPull>:
{
 800464a:	b480      	push	{r7}
 800464c:	b087      	sub	sp, #28
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	0a1b      	lsrs	r3, r3, #8
 800465e:	43db      	mvns	r3, r3
 8004660:	401a      	ands	r2, r3
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	0a1b      	lsrs	r3, r3, #8
 8004666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	fa93 f3a3 	rbit	r3, r3
 800466e:	613b      	str	r3, [r7, #16]
  return result;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	fab3 f383 	clz	r3, r3
 8004676:	b2db      	uxtb	r3, r3
 8004678:	4619      	mov	r1, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	408b      	lsls	r3, r1
 800467e:	431a      	orrs	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	60da      	str	r2, [r3, #12]
}
 8004684:	bf00      	nop
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr

0800468e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b088      	sub	sp, #32
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	0c1b      	lsrs	r3, r3, #16
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	fa93 f3a3 	rbit	r3, r3
 80046ac:	60fb      	str	r3, [r7, #12]
  return result;
 80046ae:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80046b0:	fab3 f383 	clz	r3, r3
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80046b8:	e044      	b.n	8004744 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80046ba:	2201      	movs	r2, #1
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	409a      	lsls	r2, r3
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d03a      	beq.n	800473e <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	2b07      	cmp	r3, #7
 80046cc:	d806      	bhi.n	80046dc <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80046ce:	f240 1201 	movw	r2, #257	; 0x101
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	e008      	b.n	80046ee <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	3b08      	subs	r3, #8
 80046e0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046ec:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d106      	bne.n	8004704 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	461a      	mov	r2, r3
 80046fc:	69b9      	ldr	r1, [r7, #24]
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff ffa3 	bl	800464a <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	461a      	mov	r2, r3
 800470a:	69b9      	ldr	r1, [r7, #24]
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff ff06 	bl	800451e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d003      	beq.n	8004722 <LL_GPIO_Init+0x94>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b09      	cmp	r3, #9
 8004720:	d10d      	bne.n	800473e <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	461a      	mov	r2, r3
 8004728:	69b9      	ldr	r1, [r7, #24]
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff ff29 	bl	8004582 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	461a      	mov	r2, r3
 8004736:	69b9      	ldr	r1, [r7, #24]
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff ff54 	bl	80045e6 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	3301      	adds	r3, #1
 8004742:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	fa22 f303 	lsr.w	r3, r2, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1b4      	bne.n	80046ba <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3720      	adds	r7, #32
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004760:	4b03      	ldr	r3, [pc, #12]	; (8004770 <LL_RCC_GetSysClkSource+0x14>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 030c 	and.w	r3, r3, #12
}
 8004768:	4618      	mov	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr
 8004770:	40021000 	.word	0x40021000

08004774 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004778:	4b03      	ldr	r3, [pc, #12]	; (8004788 <LL_RCC_GetAHBPrescaler+0x14>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004780:	4618      	mov	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr
 8004788:	40021000 	.word	0x40021000

0800478c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004790:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004798:	4618      	mov	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr
 80047a0:	40021000 	.word	0x40021000

080047a4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80047a8:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <LL_RCC_GetAPB2Prescaler+0x14>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr
 80047b8:	40021000 	.word	0x40021000

080047bc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80047c0:	4b03      	ldr	r3, [pc, #12]	; (80047d0 <LL_RCC_PLL_GetMainSource+0x14>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr
 80047d0:	40021000 	.word	0x40021000

080047d4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80047d8:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	40021000 	.word	0x40021000

080047ec <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <LL_RCC_PLL_GetPrediv+0x18>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	0c5b      	lsrs	r3, r3, #17
 80047f6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000

08004808 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004810:	f000 f820 	bl	8004854 <RCC_GetSystemClockFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f000 f83e 	bl	80048a0 <RCC_GetHCLKClockFreq>
 8004824:	4602      	mov	r2, r0
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f84c 	bl	80048cc <RCC_GetPCLK1ClockFreq>
 8004834:	4602      	mov	r2, r0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 f858 	bl	80048f4 <RCC_GetPCLK2ClockFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	60da      	str	r2, [r3, #12]
}
 800484a:	bf00      	nop
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800485e:	f7ff ff7d 	bl	800475c <LL_RCC_GetSysClkSource>
 8004862:	4603      	mov	r3, r0
 8004864:	2b08      	cmp	r3, #8
 8004866:	d00c      	beq.n	8004882 <RCC_GetSystemClockFreq+0x2e>
 8004868:	2b08      	cmp	r3, #8
 800486a:	d80e      	bhi.n	800488a <RCC_GetSystemClockFreq+0x36>
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <RCC_GetSystemClockFreq+0x22>
 8004870:	2b04      	cmp	r3, #4
 8004872:	d003      	beq.n	800487c <RCC_GetSystemClockFreq+0x28>
 8004874:	e009      	b.n	800488a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004876:	4b09      	ldr	r3, [pc, #36]	; (800489c <RCC_GetSystemClockFreq+0x48>)
 8004878:	607b      	str	r3, [r7, #4]
      break;
 800487a:	e009      	b.n	8004890 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800487c:	4b07      	ldr	r3, [pc, #28]	; (800489c <RCC_GetSystemClockFreq+0x48>)
 800487e:	607b      	str	r3, [r7, #4]
      break;
 8004880:	e006      	b.n	8004890 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004882:	f000 f84b 	bl	800491c <RCC_PLL_GetFreqDomain_SYS>
 8004886:	6078      	str	r0, [r7, #4]
      break;
 8004888:	e002      	b.n	8004890 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800488a:	4b04      	ldr	r3, [pc, #16]	; (800489c <RCC_GetSystemClockFreq+0x48>)
 800488c:	607b      	str	r3, [r7, #4]
      break;
 800488e:	bf00      	nop
  }

  return frequency;
 8004890:	687b      	ldr	r3, [r7, #4]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	007a1200 	.word	0x007a1200

080048a0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80048a8:	f7ff ff64 	bl	8004774 <LL_RCC_GetAHBPrescaler>
 80048ac:	4603      	mov	r3, r0
 80048ae:	091b      	lsrs	r3, r3, #4
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	4a04      	ldr	r2, [pc, #16]	; (80048c8 <RCC_GetHCLKClockFreq+0x28>)
 80048b6:	5cd3      	ldrb	r3, [r2, r3]
 80048b8:	461a      	mov	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	40d3      	lsrs	r3, r2
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	08004bdc 	.word	0x08004bdc

080048cc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80048d4:	f7ff ff5a 	bl	800478c <LL_RCC_GetAPB1Prescaler>
 80048d8:	4603      	mov	r3, r0
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	4a04      	ldr	r2, [pc, #16]	; (80048f0 <RCC_GetPCLK1ClockFreq+0x24>)
 80048de:	5cd3      	ldrb	r3, [r2, r3]
 80048e0:	461a      	mov	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	40d3      	lsrs	r3, r2
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	08004bec 	.word	0x08004bec

080048f4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80048fc:	f7ff ff52 	bl	80047a4 <LL_RCC_GetAPB2Prescaler>
 8004900:	4603      	mov	r3, r0
 8004902:	0adb      	lsrs	r3, r3, #11
 8004904:	4a04      	ldr	r2, [pc, #16]	; (8004918 <RCC_GetPCLK2ClockFreq+0x24>)
 8004906:	5cd3      	ldrb	r3, [r2, r3]
 8004908:	461a      	mov	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	40d3      	lsrs	r3, r2
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	08004bec 	.word	0x08004bec

0800491c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	607b      	str	r3, [r7, #4]
 8004926:	2300      	movs	r3, #0
 8004928:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800492a:	f7ff ff47 	bl	80047bc <LL_RCC_PLL_GetMainSource>
 800492e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d004      	beq.n	8004940 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800493c:	d003      	beq.n	8004946 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800493e:	e00b      	b.n	8004958 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8004940:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004942:	607b      	str	r3, [r7, #4]
      break;
 8004944:	e00b      	b.n	800495e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8004946:	f7ff ff51 	bl	80047ec <LL_RCC_PLL_GetPrediv>
 800494a:	4603      	mov	r3, r0
 800494c:	3301      	adds	r3, #1
 800494e:	4a0b      	ldr	r2, [pc, #44]	; (800497c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	607b      	str	r3, [r7, #4]
      break;
 8004956:	e002      	b.n	800495e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8004958:	4b07      	ldr	r3, [pc, #28]	; (8004978 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800495a:	607b      	str	r3, [r7, #4]
      break;
 800495c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800495e:	f7ff ff39 	bl	80047d4 <LL_RCC_PLL_GetMultiplicator>
 8004962:	4603      	mov	r3, r0
 8004964:	0c9b      	lsrs	r3, r3, #18
 8004966:	3302      	adds	r3, #2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	fb02 f303 	mul.w	r3, r2, r3
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	003d0900 	.word	0x003d0900
 800497c:	007a1200 	.word	0x007a1200

08004980 <LL_USART_IsEnabled>:
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004994:	bf0c      	ite	eq
 8004996:	2301      	moveq	r3, #1
 8004998:	2300      	movne	r3, #0
 800499a:	b2db      	uxtb	r3, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr

080049a6 <LL_USART_SetStopBitsLength>:
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	611a      	str	r2, [r3, #16]
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr

080049ca <LL_USART_SetHWFlowCtrl>:
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	615a      	str	r2, [r3, #20]
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr
	...

080049f0 <LL_USART_SetBaudRate>:
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	009a      	lsls	r2, r3, #2
 8004a06:	441a      	add	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	4a25      	ldr	r2, [pc, #148]	; (8004aa8 <LL_USART_SetBaudRate+0xb8>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	b299      	uxth	r1, r3
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009a      	lsls	r2, r3, #2
 8004a28:	441a      	add	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a32:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <LL_USART_SetBaudRate+0xb8>)
 8004a34:	fba3 0302 	umull	r0, r3, r3, r2
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	2064      	movs	r0, #100	; 0x64
 8004a3c:	fb00 f303 	mul.w	r3, r0, r3
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	3332      	adds	r3, #50	; 0x32
 8004a46:	4a18      	ldr	r2, [pc, #96]	; (8004aa8 <LL_USART_SetBaudRate+0xb8>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	440b      	add	r3, r1
 8004a58:	b299      	uxth	r1, r3
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	009a      	lsls	r2, r3, #2
 8004a64:	441a      	add	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <LL_USART_SetBaudRate+0xb8>)
 8004a70:	fba3 0302 	umull	r0, r3, r3, r2
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	2064      	movs	r0, #100	; 0x64
 8004a78:	fb00 f303 	mul.w	r3, r0, r3
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	3332      	adds	r3, #50	; 0x32
 8004a82:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <LL_USART_SetBaudRate+0xb8>)
 8004a84:	fba2 2303 	umull	r2, r3, r2, r3
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	440b      	add	r3, r1
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	609a      	str	r2, [r3, #8]
}
 8004a9c:	bf00      	nop
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	51eb851f 	.word	0x51eb851f

08004aac <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff ff5e 	bl	8004980 <LL_USART_IsEnabled>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d145      	bne.n	8004b56 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ad2:	f023 030c 	bic.w	r3, r3, #12
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	6851      	ldr	r1, [r2, #4]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	68d2      	ldr	r2, [r2, #12]
 8004ade:	4311      	orrs	r1, r2
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	6912      	ldr	r2, [r2, #16]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	4619      	mov	r1, r3
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff ff57 	bl	80049a6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	4619      	mov	r1, r3
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff ff63 	bl	80049ca <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004b04:	f107 0308 	add.w	r3, r7, #8
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff fe7d 	bl	8004808 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a13      	ldr	r2, [pc, #76]	; (8004b60 <LL_USART_Init+0xb4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d102      	bne.n	8004b1c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	e00c      	b.n	8004b36 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a11      	ldr	r2, [pc, #68]	; (8004b64 <LL_USART_Init+0xb8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d102      	bne.n	8004b2a <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	61bb      	str	r3, [r7, #24]
 8004b28:	e005      	b.n	8004b36 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a0e      	ldr	r2, [pc, #56]	; (8004b68 <LL_USART_Init+0xbc>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d101      	bne.n	8004b36 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00c      	beq.n	8004b56 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8004b44:	2300      	movs	r3, #0
 8004b46:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	69b9      	ldr	r1, [r7, #24]
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff ff4d 	bl	80049f0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004b56:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3720      	adds	r7, #32
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40013800 	.word	0x40013800
 8004b64:	40004400 	.word	0x40004400
 8004b68:	40004800 	.word	0x40004800

08004b6c <__libc_init_array>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	2600      	movs	r6, #0
 8004b70:	4d0c      	ldr	r5, [pc, #48]	; (8004ba4 <__libc_init_array+0x38>)
 8004b72:	4c0d      	ldr	r4, [pc, #52]	; (8004ba8 <__libc_init_array+0x3c>)
 8004b74:	1b64      	subs	r4, r4, r5
 8004b76:	10a4      	asrs	r4, r4, #2
 8004b78:	42a6      	cmp	r6, r4
 8004b7a:	d109      	bne.n	8004b90 <__libc_init_array+0x24>
 8004b7c:	f000 f822 	bl	8004bc4 <_init>
 8004b80:	2600      	movs	r6, #0
 8004b82:	4d0a      	ldr	r5, [pc, #40]	; (8004bac <__libc_init_array+0x40>)
 8004b84:	4c0a      	ldr	r4, [pc, #40]	; (8004bb0 <__libc_init_array+0x44>)
 8004b86:	1b64      	subs	r4, r4, r5
 8004b88:	10a4      	asrs	r4, r4, #2
 8004b8a:	42a6      	cmp	r6, r4
 8004b8c:	d105      	bne.n	8004b9a <__libc_init_array+0x2e>
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}
 8004b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b94:	4798      	blx	r3
 8004b96:	3601      	adds	r6, #1
 8004b98:	e7ee      	b.n	8004b78 <__libc_init_array+0xc>
 8004b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b9e:	4798      	blx	r3
 8004ba0:	3601      	adds	r6, #1
 8004ba2:	e7f2      	b.n	8004b8a <__libc_init_array+0x1e>
 8004ba4:	08004c08 	.word	0x08004c08
 8004ba8:	08004c08 	.word	0x08004c08
 8004bac:	08004c08 	.word	0x08004c08
 8004bb0:	08004c0c 	.word	0x08004c0c

08004bb4 <memset>:
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	4402      	add	r2, r0
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d100      	bne.n	8004bbe <memset+0xa>
 8004bbc:	4770      	bx	lr
 8004bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc2:	e7f9      	b.n	8004bb8 <memset+0x4>

08004bc4 <_init>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	bf00      	nop
 8004bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bca:	bc08      	pop	{r3}
 8004bcc:	469e      	mov	lr, r3
 8004bce:	4770      	bx	lr

08004bd0 <_fini>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	bf00      	nop
 8004bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd6:	bc08      	pop	{r3}
 8004bd8:	469e      	mov	lr, r3
 8004bda:	4770      	bx	lr
